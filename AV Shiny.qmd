---
title: "AV profit"
author: "Bijesh Mishra, Ph.D."
format: html
server: shiny
---

## Shiny Documents

This Quarto document is made interactive using Shiny. Interactive documents allow readers to modify parameters and see the results immediately. Learn more about Shiny interactive documents at <https://quarto.org/docs/interactive/shiny/>.

## Inputs and Outputs

You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change. This demonstrates how a standard R plot can be made interactive:

```{r}
library(shiny, warn.conflicts = FALSE, quietly = TRUE) #feather
library(arrow, warn.conflicts = FALSE, quietly = TRUE) #feather
tav_profit <- as.data.frame(read_feather(file = "tav_profit.feather"))
```

```{r}
# Install and load necessary packages
# Define the UI
ui <- fluidPage(
  titlePanel("Filtered Data Table"),
  sidebarLayout(
    sidebarPanel(
      selectInput("sprop", "Select sprop:", choices = NULL),
      selectInput("al_regs", "Select al_regs:", choices = NULL),
      selectInput("array", "Select array:", choices = NULL),
      selectInput("elcprc", "Select elcprc:", choices = NULL),
      selectInput("height", "Select height:", choices = NULL),
      selectInput("capex", "Select capex:", choices = NULL),
      selectInput("price", "Select price:", choices = NULL),
      selectInput("yldvar", "Select yldvar:", choices = NULL)
    ),
    mainPanel(
      dataTableOutput("filteredTable")
    )
  )
)

# Define the server logic
server <- function(input, output, session) {
  # Load your data (replace 'your_dataframe' with the actual dataframe name)
  df <- tav_profit
  
  # Update the selectInput choices based on the unique values in the dataframe
  observe({
    updateSelectInput(session, "sprop", choices = unique(df$sprop))
    updateSelectInput(session, "al_regs", choices = unique(df$al_regs))
    updateSelectInput(session, "array", choices = unique(df$array))
    updateSelectInput(session, "elcprc", choices = unique(df$elcprc))
    updateSelectInput(session, "height", choices = unique(df$height))
    updateSelectInput(session, "capex", choices = unique(df$capex))
    updateSelectInput(session, "price", choices = unique(df$price))
    updateSelectInput(session, "yldvar", choices = unique(df$yldvar))
  })
  
  # Filter the dataframe based on the selected inputs
  filteredData <- reactive({
    df %>%
      filter(
        sprop == input$sprop,
        al_regs == input$al_regs,
        array == input$array,
        elcprc == input$elcprc,
        height == input$height,
        capex == input$capex,
        price == input$price,
        yldvar == input$yldvar
      ) %>%
      select(tav_profit)
  })
  
  # Render the filtered table
  output$filteredTable <- renderDataTable({
    filteredData()
  })
}

# Run the Shiny app
shinyApp(ui = ui, server = server)
```