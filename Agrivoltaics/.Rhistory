# Cost of Insurance = $5/$1000/Yr Total capex
inscst = ttlcost*5/1000, #Cost
# Renewable energy credit 6.60 $/MWh
recredit = 6.60/1000*energy, #Return
# REAP Program = 50% of Capex - Simple interest rmbrst delay
reap = reapprop*ttlcost - (reapprop*ttlcost)*i*0.5/100, #Return
# Annualized cost - reap:
annlzcost = (ttlcost - reap)*(i*(1+i)^n)/((1+i)^n-1),
# Annualized Cost of total cost:
annoftotcost = ttlcost*(i*(1+i)^n)/((1+i)^n-1),
# Monthalized using monthly discount rate:
monthlycost = ttlcost*
((i/12)*(1+(i/n))^(n*12))/((1+(i/12))^(n*12)-1),
# Operational cost = 3% of annualized total capex
opex = 3*annoftotcost/100, #Cost
# Tax credit = 30% of annualized capex
taxcr = 30*annoftotcost/100, #Return
# Annualized using annual discount rate:
anncost = annlzcost + opex
)
solar_profit <- energy_cost %>%
mutate(
# Annualized Profit
eannprof = elcrev + recredit + taxcr - anncost,
eannprofworeap = elcrev + recredit + taxcr - annoftotcost,
eannprofwoincentives = elcrev - annoftotcost
)
write_xlsx(file = "Results/Solar Profit.xlsx",
x = solar_profit,
overwrite = TRUE,
as_table = TRUE)
str(solar_profit)
head(solar_profit); tail(solar_profit)
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
for (i in unique(solar_profit$elcprc)) {
b = ggplot(
data = (solar_profit %>%
dplyr::filter(elcprc == i)),
mapping = aes(
x = al_regs,
y = eannprof, #Annual Profit
#fill = energy,
color = factor(panels),
group = factor(panels)
)
) +
geom_line() +
geom_point() +
facet_grid(height ~ array) +
scale_x_discrete(limits = lox,
labels = c("North", "Center",
"B Belt", "South")) +
guides(color = guide_legend(ncol = 2,
reverse = TRUE))
cat("Electricity Price = ", i)
print(b)
}
tomato_profit = tomato %>%
select(yldvar, yield,
rolac17, rolac18, rolac19, rolac20,
rolac21, rolac22, rolac23)
dim(tomato_profit)
tomato_profit
# Assign column names for clarity
colnames(tomato_profit) <- c("yldvar", "yield",
"rolac17", "rolac18", "rolac19",
"rolac20", "rolac21", "rolac22",
"rolac23")
# Reshape the data frame from wide to long format
tomato_long <- melt(tomato_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("rolac17", "rolac18", "rolac19",
"rolac20", "rolac21", "rolac22",
"rolac23"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
tomato_long$price <- as.numeric(gsub("rolac", "", tomato_long$price))
str(tomato_long)
head(tomato_long); tail(tomato_long)
ggplot(data = tomato_long,
mapping = aes(x = price,
y = profit,
color = factor(yldvar),
group = factor(yield))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
guides(color = guide_legend(ncol = 2,
reverse = TRUE))
ggplot(data = tomato_long,
mapping = aes(x = yield,
y = profit,
#fill = yield,
color = factor(price),
group = factor(price))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
# Vertical dashed line is 100% yield
geom_vline(xintercept = tomato_long$yield[11],
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
strawberry_profit = strawberry %>%
select(yldvar, yield,
rolac3, rolac4, rolac5, rolac6,
rolac7, rolac8, rolac9)
str(strawberry_profit)
strawberry_profit
# Assign column names for clarity
colnames(strawberry_profit) <- c("yldvar", "yield",
"rolac3", "rolac4", "rolac5",
"rolac6", "rolac7", "rolac8",
"rolac9")
# Reshape the data frame from wide to long format
stberry_long <- melt(strawberry_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("rolac3", "rolac4", "rolac5",
"rolac6", "rolac7", "rolac8",
"rolac9"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
stberry_long$price <- as.numeric(gsub("rolac", "", stberry_long$price))
str(stberry_long)
head(stberry_long); tail(stberry_long)
ggplot(data = stberry_long,
mapping = aes(x = price,
y = profit,
color = factor(yldvar),
group = factor(yield))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
guides(color = guide_legend(ncol = 2,
reverse = TRUE))
ggplot(data = stberry_long,
mapping = aes(x = yield,
y = profit,
color = factor(price),
group = factor(price))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
#Vertical dashed line is 100% yield
geom_vline(xintercept = stberry_long$yield[11],
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
# Calculate all combinations of rows from both matrices in a vectorized way
solar_expanded <- solar_profit[rep(1:nrow(solar_profit),
each = nrow(tomato_long)), ]
tomato_expanded <- tomato_long[rep(1:nrow(tomato_long),
times = nrow(solar_profit)), ]
# Calculate the new column for tav_profit directly
tav_profit_values <- solar_expanded$eannprof + tomato_expanded$profit
# Combine the matrices and the calculated tav_profit column
tav_profit <- cbind(solar_expanded,
tomato_expanded,
tav_profit = tav_profit_values)
# Convert to a data frame and ensure the correct format
tav_profit <- as.data.frame(tav_profit)
tav_profit <- data.frame(lapply(tav_profit, unlist))
str(tav_profit)
head(tav_profit); tail(tav_profit)
write_feather(tav_profit,
sink = "Data/tav_profit.feather",
version = 2,
chunk_size = 65536L,
compression = c("default"),
#compression = c("default", "lz4", "lz4_frame", "uncompressed", "zstd"),
compression_level = NULL
)
tictoc::tic("Using Dplyr:")
write_xlsx(x = tav_profit %>%
dplyr::sample_n(100),
file = "Results/TAV Profit Sample.xlsx",
as_table = TRUE)
tictoc::toc()
# Generate all combinations of rows from both matrices in a vectorized way
solar_expanded <- solar_profit[rep(1:nrow(solar_profit),
each = nrow(stberry_long)), ]
stberry_expanded <- stberry_long[rep(1:nrow(stberry_long),
times = nrow(solar_profit)), ]
# Calculate the new column for sbav_profit directly
sbav_profit_values <- solar_expanded$eannprof + stberry_expanded$profit
# Combine the matrices and the calculated sbav_profit column
sbav_profit <- cbind(solar_expanded,
stberry_expanded,
sbav_profit = sbav_profit_values)
# Convert to a data frame and ensure the correct format
sbav_profit <- as.data.frame(sbav_profit)
sbav_profit <- data.frame(lapply(sbav_profit, unlist))
str(sbav_profit)
head(sbav_profit); tail(sbav_profit)
#write_csv(sbav_profit, "tav_profit.csv")
write_feather(sbav_profit,
sink = "Data/sbav_profit.feather",
version = 2,
chunk_size = 65536L,
compression = c("default"),
#compression = c("default", "lz4", "lz4_frame", "uncompressed", "zstd"),
compression_level = NULL
)
tictoc::tic("Using Base R Matrix:")
write_xlsx(x = sbav_profit[sample(nrow(tav_profit), 100),],
file = "Results/SBAV Profit Sample.xlsx",
as_table = TRUE)
tictoc::toc()
names
names(tav_profit)
runApp('AV Shiny.R')
names(tomato)
names(strawberry)
names(squash)
runApp('AV Shiny.R')
library(shiny); runApp('AV Shiny.R')
runApp('AV Shiny.R')
library(shiny); runApp('AV Shiny.R')
runApp('AV Shiny.R')
runApp('Agrivoltaics')
getwd)
getwd()
runApp('Agrivoltaics')
runApp('AV Shiny.R')
library(shiny); runApp('AV Shiny.R')
runApp('Agrivoltaics')
# Load required libraries
library(arrow, warn.conflicts = FALSE, quietly = TRUE)
library(tidyverse, warn.conflicts = FALSE, quietly = TRUE)
library(shiny, warn.conflicts = FALSE, quietly = TRUE)
library(DT, warn.conflicts = FALSE, quietly = TRUE)
library(moments) # For skewness and kurtosis calculations
# Load the datasets
# Tomato AV:
tav <- as.data.frame(read_feather(file = "Data/tav_profit.feather")) %>%
rename(avprofit = tav_profit) %>%
mutate(
avtype = "tav",
avprofit = round(avprofit, 0),
yield = round(yield, 0)
)
# Strawberry AV:
sbav <- as.data.frame(read_feather(file = "Data/sbav_profit.feather")) %>%
rename(avprofit = sbav_profit) %>%
mutate(
avtype = "sbav",
avprofit = round(avprofit, 0),
yield = round(yield, 0)
)
# Squash AV:
sqav <- as.data.frame(read_feather(file = "Data/sqav_profit.feather")) %>%
rename(avprofit = sqav_profit) %>%
mutate(
avtype = "sqav",
avprofit = round(avprofit, 0),
yield = round(yield, 0)
)
# Combine datasets
combined_data <- bind_rows(tav, sbav, sqav)
# Define UI
ui <- fluidPage(
titlePanel("Specialty Crop Agrivoltaics in Alabama, USA"),
titlePanel("Authors: Mishra, B., Miao, R., Musa, N.,
Mwbaze P., McCall, J., Khanna, M."),
titlePanel("App Developer: Bijesh Mishra"),
sidebarLayout(
sidebarPanel(
width = 2,
selectInput("dataset", "Select Dataset",
choices = c("Tomato AV" = "tav",
"Strawberry AV" = "sbav",
"Summer Squash AV" = "sqav")),
selectInput("al_regs", "Alabama Regions",
choices = unique(combined_data$al_regs),
selected = NULL, multiple = TRUE),
selectInput("array", "Panel Arrays",
choices = unique(combined_data$array),
selected = NULL, multiple = TRUE),
selectInput("panels", "Total Panels",
choices = unique(combined_data$panels),
selected = NULL, multiple = TRUE),
selectInput("elcprc", "Electricity Price ($)",
choices = unique(combined_data$elcprc),
selected = NULL, multiple = TRUE),
selectInput("height", "Panel Height (Ft.)",
choices = unique(combined_data$height),
selected = NULL, multiple = TRUE),
selectInput("crop_yield", "Crop Yield",
choices = NULL,  # Start with no choices
selected = NULL, multiple = TRUE),
selectInput("crop_price", "Crop Price ($)",
choices = NULL,  # Start with no choices
selected = NULL, multiple = TRUE),
selectInput("group_by", "Group By",
choices = c("Regions" = "al_regs",
"Solar Arrays" = "array",
"Solar Panels" = "panels",
"Electricity Price" = "elcprc",
"Panel Height" = "height",
"Crop Yield" = "crop_yield",
"Crop Price" = "crop_price"),
selected = NULL,
multiple = TRUE),
actionButton("submit", "RUN"),
actionButton("reset", "RESET"),  # Reset Data button
downloadButton("download_data", "SAVE")
),
mainPanel(
width = 10,
tabsetPanel(
tabPanel("Result",
DTOutput("filtered_data")),
tabPanel("Summary",
DTOutput("summary_table"))
)
server <- function(input, output, session) {
# Store filtered data in reactiveValues
rv <- reactiveValues(filtered_data = NULL)  # Initialize as NULL
# Initialize input selections to NULL
observe({
updateSelectInput(session, "al_regs", selected = NULL)
updateSelectInput(session, "array", selected = NULL)
updateSelectInput(session, "panels", selected = NULL)
updateSelectInput(session, "elcprc", selected = NULL)
updateSelectInput(session, "height", selected = NULL)
updateSelectInput(session, "crop_price", selected = NULL)
updateSelectInput(session, "crop_yield", selected = NULL)
})
# Update crop price choices based on dataset selection
observe({
if (input$dataset == "tav") {
updateSelectInput(session, "crop_price",
choices = unique(tav$price),
selected = NULL)
} else if (input$dataset == "sbav") {
updateSelectInput(session, "crop_price",
choices = unique(sbav$price),
selected = NULL)
} else if (input$dataset == "sqav") {
updateSelectInput(session, "crop_price",
choices = unique(sqav$price),
selected = NULL)
}
})
# Update crop yield choices based on dataset selection
observe({
if (input$dataset == "tav") {
updateSelectInput(session, "crop_yield",
choices = unique(tav$yield),
selected = NULL)
} else if (input$dataset == "sbav") {
updateSelectInput(session, "crop_yield",
choices = unique(sbav$yield),
selected = NULL)
} else if (input$dataset == "sqav") {
updateSelectInput(session, "crop_yield",
choices = unique(sqav$yield),
selected = NULL)
}
})
observeEvent(input$submit, {
filtered <- combined_data
if (!is.null(input$al_regs) && length(input$al_regs) > 0) {
filtered <- filtered %>% filter(al_regs %in% input$al_regs)
}
if (!is.null(input$array) && length(input$array) > 0) {
filtered <- filtered %>% filter(array %in% input$array)
}
if (!is.null(input$panels) && length(input$panels) > 0) {
filtered <- filtered %>% filter(panels %in% input$panels)
}
if (!is.null(input$elcprc) && length(input$elcprc) > 0) {
filtered <- filtered %>% filter(elcprc %in% input$elcprc)
}
if (!is.null(input$height) && length(input$height) > 0) {
filtered <- filtered %>% filter(height %in% input$height)
}
if (!is.null(input$crop_yield) && length(input$crop_yield) > 0) {
filtered <- filtered %>% filter(yield %in% input$crop_yield)
}
if (!is.null(input$crop_price) && length(input$crop_price) > 0) {
filtered <- filtered %>% filter(price %in% input$crop_price)
}
# Filter by avtype based on dataset selection
filtered <- filtered %>% filter(avtype == input$dataset)
# Select relevant columns in the specified order
rv$filtered_data <- filtered %>%
dplyr::select(Regions = al_regs,
`Total Panels` = panels,
Arrays = array,
`Panel Height` = height,
`Electricity Price` = elcprc,
`Crop Yield` = yield,
`Crop Price` = price,
`AV Profit` = avprofit)
})
output$filtered_data <- renderDT({
req(rv$filtered_data)  # Only render if filtered_data is not NULL
rv$filtered_data
}, options = list(
pageLength = 10,
autoWidth = TRUE,
columnDefs = list(
list(width = '100px', targets = 0),  # Regions
list(width = '100px', targets = 1),  # Arrays
list(width = '100px', targets = 2),  # Total Panels
list(width = '100px', targets = 3),  # Panel Height
list(width = '100px', targets = 4),  # Electricity Price
list(width = '100px', targets = 5),  # Crop Yield
list(width = '100px', targets = 6),  # Crop Price
list(width = '100px', targets = 7)   # AV Profit
)
# CSV Download Handler
output$download_data <- downloadHandler(
filename = function() {
paste(
"AV_", Sys.Date(),
".csv",
sep = ""
)
},
content = function(file) {
write.csv(rv$filtered_data,
file,
row.names = FALSE)
}
)
rv$filtered_data <- filtered %>%
dplyr::select(
Regions = al_regs,
`Total Panels` = panels,
Arrays = array,
`Panel Height` = height,
`Electricity Price` = elcprc,
`Crop Yield` = yield,
`Crop Price` = price,
`AV Profit` = avprofit
)
output$summary_table <- renderDT({
req(rv$filtered_data)
data_filtered <- rv$filtered_data
if (nrow(data_filtered) == 0) {
return(NULL)
}
# Dynamically group by the selected input column
group_col <- input$group_by  # Use the reactive 'input' within render block
# Ensure that the selected grouping column exists in the data
if (!group_col %in% colnames(data_filtered)) {
stop("Selected grouping column does not exist in the data.")
}
})
grouped_data <- data_filtered %>%
group_by(across(all_of(group_col))) %>%  # Group by the selected column
summarise(
Mean_Profit = mean(`AV Profit`, na.rm = TRUE),
Median_Profit = median(`AV Profit`, na.rm = TRUE),
Mode_Profit = as.numeric(names(sort(table(`AV Profit`),
decreasing = TRUE)[1])),
Skewness_Profit = skewness(`AV Profit`, na.rm = TRUE),
Kurtosis_Profit = kurtosis(`AV Profit`, na.rm = TRUE),
.groups = "drop"  # Ungroup immediately after summarizing
)
# Render the grouped summary table
datatable(grouped_data,
options = list(
pageLength = 5,
autoWidth = TRUE
)
observeEvent(input$reset, {
# Reset all inputs to their defaults (or NULL)
updateSelectInput(session, "al_regs", selected = NULL)
updateSelectInput(session, "array", selected = NULL)
updateSelectInput(session, "panels", selected = NULL)
updateSelectInput(session, "elcprc", selected = NULL)
updateSelectInput(session, "height", selected = NULL)
updateSelectInput(session, "crop_price", selected = NULL)
updateSelectInput(session, "crop_yield", selected = NULL)
# Reset the filtered data to NULL
rv$filtered_data <- NULL
})
}
shinyApp(ui = ui, server = server)
rv$filtered_data <- filtered %>%
dplyr::select(
Regions = al_regs,
`Total Panels` = panels,
Arrays = array,
`Panel Height` = height,
`Electricity Price` = elcprc,
`Crop Yield` = yield,
`Crop Price` = price,
`AV Profit` = avprofit
)
runApp('Agrivoltaics')
?DTOutput
?reactiveValues
?observe
?updateSelectInput
filtered <- filtered %>% filter(avtype == input$dataset)
runApp('Agrivoltaics')
