---
title: "Choice Paper Simulation"
author: "Bijesh Mishra, Ph.D."
date: "`r Sys.Date()`"
toc: true
number-sections: true
colorlinks: true
format:
    pdf: default
    html:
      link-external-icon: true
      link-external-newwindow: true
    ipynb: default
    docx: default
editor: visual
editor_options:
  chunk_output_type: inline
---

\newpage

Collocating Specialty Crops and Solar panels in Alabama, Southeastern USA. A paper for [Choice Magazine](https://www.aaea.org/publications/choices-magazine){.uri}, AAEA.

# Setting Up

## Housekeeping

```{r HK}
rm(list = ls()) # Clean the environment.
options(
  warn=0, # Warnings. options(warn=-1) / options(warn=0)
  scipen=999 # No scientific notations.
  )
```

## Load libraries

```{r Libs}
library(tidyverse, warn.conflicts = FALSE, quietly = TRUE)
library(psych, warn.conflicts = FALSE, quietly = TRUE)
library(likert,  warn.conflicts = FALSE, quietly = TRUE) # Likert Items
library(mice,  warn.conflicts = FALSE, quietly = TRUE)
library(openxlsx2, warn.conflicts = FALSE, quietly = TRUE)
library(ggpubr, warn.conflicts = FALSE, quietly = TRUE) # Scatter plot
library(gmodels,  warn.conflicts = FALSE, quietly = TRUE) # Crosstab
library(reshape2, warn.conflicts = FALSE, quietly = TRUE) # Reshape data
library(pacman,  warn.conflicts = FALSE, quietly = TRUE) # Package Management
library(progress, warn.conflicts = FALSE, quietly = TRUE) #progress bar
library(arrow, warn.conflicts = FALSE, quietly = TRUE) #progress bar
```

## Theme for plots

Setting theme for plots:

```{r Theme}
####### Plotting Data: #####
# Map Theme:
plottheme <- ggplot() +
  theme_void() +
  # Mapping theme:
  theme(axis.title = element_blank(),
        axis.ticks = element_blank(),
        axis.text = element_blank(),
        panel.border = element_blank(),
        plot.margin = margin(t = 0, 
                             r = 0, 
                             b = 0, 
                             l = 0, 
                             unit = "cm"),
        plot.title = element_text(hjust = 0.5),
        plot.background = element_rect(fill = "white", 
                                       color = "black",
                                       linewidth = 0),
        panel.background = element_rect(fill = "white", 
                                        color = "black",
                                        linewidth = 0),
        panel.grid.major.x = element_line(color = "lightgrey",
                                          linetype = 2,
                                          linewidth = 0),
        panel.grid.minor.x = element_line(color = "lightgrey",
                                          linetype = 2,
                                          linewidth = 0),
        panel.grid.major.y = element_line(color = "grey",
                                          linetype = 2,
                                          linewidth = 0),
        panel.grid.minor.y = element_line(color = "grey",
                                          linetype = 2,
                                          linewidth = 0),
        axis.line.x.top = element_line(color = "white",
                                       linetype = 2,
                                       linewidth = 0),
        axis.line.y.right = element_line(color = "white",
                                         linetype = 2,
                                         linewidth = 0),
        axis.line.x.bottom = element_line(color = "black",
                                          linetype = 1,
                                          linewidth = 0),
        axis.line.y.left = element_line(color = "black",
                                        linetype = 1,
                                        linewidth = 0),
        # Text formatting:
        text = element_text(family = "serif", # font
                            size = 12, # font size
                            colour = "black"# font color
        ),
        legend.key = element_rect(color = "black", 
                                  fill = NA, 
                                  linewidth = 0.05, 
                                  linetype = 1),
        legend.justification = "right",
        legend.direction = "horizontal")
```

# Import data

Import necessary data.

## Tomato

-   Yield = Total tomato production (total bucket of 25 lb) from 1 acres of land which varies from 10% to 200% of total production (100%). The range was simulated by multiplying 100% yield by yldvar.

-   yldvar = Yield variation parameter ranges from 10% to 200%.

-   Rev17 to Rev23 = Revenue for price ranges of \$17 to \$23 per bucket of tomato.

-   Total cost = Total cost of production for the given yield.

-   rolac17 to rolac23= Return to operator, labor and capital for price range of \$17 to \$23.

-   operator Cost = Operator labor cost at \$15/hour for given yield. For 100% yield, total hours = 90.

-   rlc17 to 23 = Return to land and capital after subtracting operator cost from total revenue.

```{r ImportTomato}
tomato <- read_xlsx("Data/Parameters.xlsx",
                    sheet = "Tomato",
                    start_row = 2,
                    start_col = 9,
                    skip_empty_rows = TRUE,
                    skip_empty_cols = TRUE,
                    col_names = TRUE) %>% 
  rename(yield = Yield,
         yldvar = `Yield Variation (%)`)
str(tomato)
head(tomato); tail(tomato)
```

## Strawberry

-   Everything same as tomato.

-   Numbers 3 to 9 in names are price ranges for strawberry.

```{r ImportSB}
strawberry <- read_xlsx("Data/Parameters.xlsx",
                        sheet = "Strawberry",
                        start_row = 2,
                        start_col = 7,
                        skip_empty_rows = TRUE,
                        skip_empty_cols = TRUE,
                        col_names = TRUE) %>% 
  rename(yield = Yield,
         yldvar = `Yield Variation (%)`)
str(strawberry)
head(strawberry); tail(strawberry)
```

## Squash

-   Everything same as tomato and strawberry.

-   Numbers 11 to 17 in names are price ranges for squash.

```{r ImportSQ}
squash <- read_xlsx("Data/Parameters.xlsx",
                    sheet = "Squash",
                    start_row = 2,
                    start_col = 8,
                    skip_empty_rows = TRUE,
                    skip_empty_cols = TRUE,
                    col_names = TRUE) %>% 
  rename(yield = Yield,
         yldvar = `Yield Variation (%)`)
str(squash)
head(squash); tail(squash)
```

## Electricity price

Electricity price ranges from 1 cents to 6 cents in 0.5 cent increment. Previously, I used AL retail electricity price as described below. It's no longer in use but I put description below for the record.

Electricity price (\$/kWh) was retail electricity price range for Alabama based on retail electricity price in April 2023 and April 2024 taken from [DOE Database](https://www.eia.gov/electricity/monthly/epm_table_grapher.php?t=epmt_5_6_a). Retail electricity price range in Alabama was from 6.44 to 15.85 cents/kWh in April 2023 and April 2024 which represents industry, commercial, and residential prices.

```{r ImpElcPrc}
elec_price <- read_xlsx("Data/Parameters.xlsx",
                              sheet = "Electricity Price") %>%
  rename(epr_kwh = `Electricity Price ($/kWh)`)
str(elec_price)
elec_price
```

## PV system cost

-   Data taken from "[Capital Costs for Dual-Use Photovoltaic Installations: 2020 Benchmark](https://www.nrel.gov/docs/fy21osti/77811.pdf){.uri}" Table 1 and Figure 3.
-   This data was used to estimate CAPEX.
-   avtyps = agrivoltaic types.
-   item = itemized component of system.
-   cost = cost of each item.
-   height = ground to panel clearance height (ft.)
-   tcost = Total cost is the sum of all itemized cost for AV system. See figure 3 and table 1 in above document for more detail.

```{r PVSC}
pvsc <- wb_read(file = "Data/Parameters.xlsx",
                sheet = "PV system Cost (NREL)",
                rows = c(1:109),
                cols = c(1:5),
                col_names = TRUE) %>%
  rename(avtyps = `AV Types`,
         item = Item,
         cost = `Cost ($/W)`,
         height = `Panel Height (ft.)`,
         tcost = `Total Cost ($/W)`
         )
str(pvsc)
head(pvsc); tail(pvsc)
```

## Capex (NREL)

Variable Descriptions:

-   Capex: Capital investment cost (\$/W) to develop solar energy system. Capex includes cost of physical structure, developer's overhead and EPC/Developer's net profit.

-   capex estimated as f(height, tracker) using OLS for 6.4 ft Tracking system.

-   Height = ground to panel clearance in ft.

-   array: Solar array. Tracker = Single axis sun tracking panels; Fixed = Non-tracking panels.

-   Source: [Horowitz, 2020. CAPEX AV.](https://www.nrel.gov/docs/fy21osti/77811.pdf)

```{r CAPEXNREL}
capex <- read.table(file = "Data/CAPEX.txt",
                    header = TRUE,
                  sep = "\t") %>% 
  rename(capex = cost,
         height = pheight,
         array = tracker)
str(capex)
capex
```

### Plotting capex

```{r CpxPlt}
capex %>%
  ggplot(aes(
    x = height,
    y = capex,
    color = array,
    group = array
  )) +
  geom_point() +
  geom_line() +
  # Display the rounded capex values
  geom_text(aes(label = sprintf("%.2f", capex)),
            vjust = -0.8,
            hjust = 0.8,
            size = 2,
            check_overlap = TRUE,
            show.legend = FALSE
            ) +
  labs(
    #title = "CAPEX Cost by Solar Panel Height",
    x = "Solar Panel Clearance Height (ft.)",
    y = "CAPEX Cost ($/W)",
    color = "Array Types:"
    ) +
  scale_x_continuous(limits = c(4.5, 8.5)) +
  scale_y_continuous(limits = c(1.5, 2.5)) +
  guides(color = guide_legend(reverse = TRUE)) +
  theme(
    plot.background = element_rect(
      fill = "grey",
      color = "black"
      ),
    legend.position = "inside",
    legend.position.inside = c(0.2, 0.8),
    legend.background = element_rect(
      fill = "white", 
      color = "black"
      ),
    plot.margin = margin(10, 10, 10, 10)
  ) +
  scale_color_manual(
    values = c("Fixed" = "blue",
               "Tracking" = "red"),
    labels = c("Fixed Open Rack",
               "Single Axis Rotation")
  )

# Save the plot
ggsave(
  filename = "Plots/CAPEX Solar Panels R25.png",
  width = 8,
  height = 6,
  units = "in"
  )
```

## Panel Configuration

-   Panel configuration and DV system output (W).

```{r PConf}
panconf <- wb_read(file = "Data/Parameters.xlsx",
                sheet = "PV Spacing",
                start_row = 2,
                start_col = 1,
                skip_empty_rows = TRUE,
                skip_empty_cols = TRUE,
                col_names = TRUE)
str(panconf)
head(panconf); tail(panconf)
```

## Energy output

Energy output was simulated using NREL [PV Watts Calculator](https://pvwatts.nrel.gov/pvwatts.php){.uri}.

-   sprop = land proportion covered by solar in 1 acres. Value ranges from 0 to 1.

-   Panels = Total number of panels in 1 acres of land.

-   datalot: 1 = first simulation done for four regions of AL; 2 = second simulation done for four regions of AL. Two simulations have two unique zipcodes for each simulated region.

-   al_regs = regions of Alabama

-   zips = zipcodes selected from each region of AL for simulation.

-   array = Fixed (open rack); 1AxisRot = 1 Axis Tracking. See above NREL tool for more detail.

-   dc_kw = DC system size, calculated for each solar panel heights considering solar panels efficiency and area covered by solar panels.

-   energy = total energy output ( kWh/Year) considering system parameters. Total hours considered by the model is 8,760 (See [PV Watts Calculator](https://pvwatts.nrel.gov/pvwatts.php){.uri} Results \> help (below the result) \> results \> download monthly or hourly results).

```{r EngOut}
energy_output <- read_xlsx("Data/Parameters.xlsx", 
                           sheet = "Energy Output",
                           start_row = 1,
                           start_col = 1,
                           skip_empty_rows = TRUE,
                           skip_empty_cols = TRUE,
                           col_names = TRUE) %>%
  rename(sprop = `Solar Proportion`,
         panels = `Total Panels`,
         datalot = DataLot,
         al_regs = `Region of AL`,
         zips = ZIPCODE,
         array = `Array Type`,
         dc_kw = `DC System Size (kW)`,
         energy = `Energy (kWh/Year)`) %>%
  mutate(
    dc_kw = round(dc_kw,2),
    array = case_when(
      array == "1AxisRot" ~ "Tracking",
      array == "FixedOpen" ~ "Fixed",
      TRUE ~ array)
    )
str(energy_output)
head(energy_output); tail(energy_output)
```

### By \# of Panels

Plotting Energy output by number of solar panels in one acres of AV system from fixed and single axis rotation system for two zipcodes (1, 2) within each of the four regions of AL.

```{r EOBSPC}
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
ggplot(data = energy_output,
         mapping = aes(x = al_regs,
                       y = energy,
                       #fill = energy,
                       color = factor(panels),
                       group = factor(panels))) +
  geom_line()+
  geom_point() +
  facet_grid(datalot~array) +
  scale_x_discrete(limits = lox,
                   labels = c("North", "Center", "B Belt", "South")) +
  guides(color = guide_legend(ncol = 2, reverse = TRUE))
```

### By DC System Size

Plotting Energy output by DC System Size from fixed and single axis rotation system for two zipcodes (1, 2) within each of the four regions of AL.

```{r EOBDCSS}
lox <- c("Northern", "Central", "Black Belt", "Southern")
ggplot(data = energy_output,
         mapping = aes(x = al_regs,
                       y = energy,
                       #fill = energy,
                       color = factor(dc_kw),
                       group = factor(dc_kw))) +
  geom_line()+
  geom_point() +
  facet_grid(datalot~array) +
  scale_x_discrete(limits = lox,
                   labels = c("North", "Center", "B Belt", "South")) +
  guides(color = guide_legend(ncol = 2, reverse = TRUE))
```

# Solar Energy

## Simulation: Energy Revenue

-   elcprc = electricity price. See Electricity price data for more detail.

-   elcrev = Revenue from electricity for given electricity prices. See "energy output" and "electricity price" dataset for more details.

-   I filtered datalot 2--I did not take average of "energy" from datalot 1 and datalot 2--to minimize computation time.

```{r Sim1}
# Convert to data frames if they are not already
matrix1 <- energy_output  %>%
  group_by(sprop, al_regs, array, dc_kw, panels) %>%
  dplyr::filter(datalot == 2) %>%
  # Compute mean of datalot 1 and datalot 2:
  summarise(
    energy = mean(energy),
    .groups = 'drop'
    ) # dimension of matrix is 168*6
matrix2 <- elec_price # dimension of matrix is 11*1

# Initialize the result data frame
# energy_revenue <- data.frame(matrix(nrow = 1848, ncol = 9))
energy_revenue <- data.frame(
  matrix(nrow = nrow(matrix2)*nrow(matrix1),
         ncol = ncol(matrix2)+ncol(matrix1)+1))

# Variable to keep track of the row index in the result matrix
row_index <- 1

# Loop through each value of the second matrix
for (i in 1:nrow(matrix2)) {
  # Loop through each value of the second matrix
  for (j in 1:nrow(matrix1)) {
    # First matrix, second matrix, combined two matrices.
    new_row <- c(matrix1[j, ], 
                 matrix2[i, ], 
                 matrix1$energy[j] * matrix2$epr_kwh[i])
    # Assign the new row to the result matrix
    energy_revenue[row_index, ] <- new_row
    # Increment the row index
    row_index <- row_index + 1
  }
}
# Name the columns
colnames(energy_revenue) <- c(colnames(matrix1), "elcprc", "elcrev")
# Check for any NAs in the result
if(any(is.na(energy_revenue))) {
  na_indices <- which(is.na(energy_revenue), arr.ind = TRUE)
  print(paste("NAs found at rows:", unique(na_indices[, 1])))
} else {
  print("No NAs found in the result data frame.")
}
str(energy_revenue)
head(energy_revenue); tail(energy_revenue)
```

## Simulation 2: Energy Revenue

This simulation has same result as above (Cross checking above code and output). Results are suppressed but errors and warnings are not. No error and no warnings means code is working as it should.

```{r Sim2, eval=FALSE}
## | results='hide'
# Sample data
set.seed(123)
matrix1 <- energy_output # dimension of matrix is 176*7
matrix2 <- elec_price # dimension of matrix is 11*1

# Initializing the result matrix
result_matrix <- data.frame(matrix(ncol = nrow(matrix2),
                                   nrow = 0))
colnames(result_matrix) <- c(colnames(matrix1),  "elcrev", "elcprc")

# Loop to multiply first and second matrices
for (i in 1:nrow(matrix2)) {
  temp_matrix <- matrix1
  temp_matrix$E_Prc <- matrix2[i, ]
  temp_matrix$E_Rev <- matrix1$energy[j] * matrix2$epr_kwh[i]
  result_matrix <- rbind(result_matrix, temp_matrix)
}
str(result_matrix)
head(result_matrix); tail(result_matrix)
```

## Plots: Energy Revenue

### By \# of solar panels

I am using data from simulation 1 for this visualization. This code plots one chart per electricity cost. There are 11 electricity cost resulting into 11 charts. Electricity revenue is average revenue of first and second lots of simulation.

```{r BDBNSPs}
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
for (i in unique(energy_revenue$elcprc)) {
 a = ggplot(data = (energy_revenue %>%
  dplyr::filter(elcprc == i)),
         mapping = aes(x =al_regs,
                       y = elcrev,
                       #fill = energy,
                       color = factor(panels),
                       group = factor(panels)))+
  geom_line()+
  geom_point()+
  facet_grid(.~array) +
  scale_x_discrete(limits = lox,
                   labels = c("North", "Center", "B Belt", "South")) +
   guides(color = guide_legend(ncol = 2, reverse = TRUE))
 cat("Electricity Price = ", i)
 print(a)
}
```

### By Land in Solar

-   Two proportions may have same number of solar panels (Eg. 0.80 and 0.85, 0.20 and 0.25). So, total lines in the chart may not match with total number of legend levels. Some proportions are overlapping in the chart. See panel configuration for more detail.

```{r BDBPLUS}
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
for (i in unique(energy_revenue$elcprc)) {
 a = ggplot(data = (energy_revenue %>%
  dplyr::filter(elcprc == i)),
         mapping = aes(x =al_regs,
                       y = elcrev,
                       #fill = energy,
                       color = factor(sprop),
                       group = factor(sprop)))+
  geom_line()+
  geom_point()+
  facet_grid(.~array) +
  scale_x_discrete(limits = lox,
                   labels = c("North", "Center", "B Belt", "South")) +
   guides(color = guide_legend(ncol = 2, reverse = TRUE))
 cat("Electricity Price = ", i)
 print(a)
}
```

## Cost and Profit from solar

-   Cost of solar energy system in agrivoltaic setting.

-   I used energy output per 7.75 ft.\*3.5 ft. panel (545 w), capex (\$/w), and total number of panels to get total cost for each height and panel tracking system.

-   height = height of solar panels; see capex dataset for details.

-   capex = capex from capex table; see capex dataset for details.

-   opex = Operational cost (\$15/kW/Year) Source: [Ramasamy, 2022. PV Cost Benchmark](https://www.nrel.gov/docs/fy22osti/83586.pdf) (This is revised to 3% of annual capex based on Dennis Brother's suggestion).

-   ttlcost = Total cost for given DC system size.

-   anncost = Annual payment to repay loan ($P_{ann}$) = $\frac{P_o(i(1 + i)^t)}{(1+i)^t - 1)}$ , where $P_o$ = CAPEX loan burrowed to repay in $t$ years; $t = 25$, and $i$ = annual interest rate at $5\%$.

-   moncost = Monthly payment to repay loan ($P_{mon}$) = $\frac{P_o((i/12)(1 + (i/12))^{t*12})}{(1+(i/12))^{t*12} - 1)}$, where $P_o$ = CAPEX loan burrowed to repay in $t$ years; $t = 25$, and $i$ = annual interest rate at $5\%$.

-   inscst = insurance cost. \$5 per \$1000 capex.

-   eprofit = profit from electricity after subtracting total cost (ttlcost) from total revenue (elcrev).

-   eannprof = annual profit from solar after subtracting annual loan repayment distributed over 25 years.

-   emonprof = monthly profit from solar after subtracting monthly loan repayment distributed over 25 years.

-   eannprofworeap = annual profit without REAP benefit.

-   eannprofwoincentives = Annual profit without incentives.

Policy Components:

-   taxcr = 30% tax credit of annual cost covered through federal tax exemption (Investment tax credit).

-   reap = Rural Energy for America Program reimburses 50% of capex (ttlcost) upfront. The waiting time for reimbursement is about 6 months. So, 50% of ttlcost acquire simple interest for six months. This is changed to 25% and 50%.

-   recredit = renewable energy credit (\$6.60/MWh).

```{r SSC2}
i = 0.07 # Discount/interest Rate
n = 25 # Life Span of solar panels (Years)
reapprop = 25/100  # Percentage of CAPEX covered by REAP program.

expanded_data <- energy_revenue %>%
  slice(rep(1:n(),
            each = 3))
capex_height <- rep(unique(capex$height),
                    length.out = nrow(energy_revenue))

energy_cost = cbind(expanded_data, capex_height) %>% 
  rename(height = capex_height)

energy_cost <- left_join(energy_cost, 
                         capex, 
                         by = c("array", "height")) %>%
  mutate(
    # 7.75*3.5 sq.ft. panel energy output = 545 W.
    # Operational cost (OPEX) = $15/kW-yr; 1 kW = 1,000W.
    # Opex = 545*15/1000*panels,
    
    # Land lease cost Per acre.
    landlease = 1000,
    
    # Total Capex
    ttlcost = capex*545*panels,

    # Cost of Insurance = $5/$1000/Yr Total capex
    inscst = ttlcost*5/1000, #Cost
    
    # Renewable energy credit 6.60 $/MWh
    recredit = 6.60/1000*energy, #Return
    
    # REAP Program = 50% of Capex - Simple interest rmbrst delay
    reap = reapprop*ttlcost - (reapprop*ttlcost)*i*0.5/100, #Return
    
    # Annualized cost - reap:
    annlzcost = (ttlcost - reap + inscst)*(i*(1+i)^n)/((1+i)^n-1),
    
    # Annualized Cost of total cost:
    annoftotcost = ttlcost*(i*(1+i)^n)/((1+i)^n-1),
    
    # Monthalized using monthly discount rate:
    monthlycost = ttlcost*
      ((i/12)*(1+(i/n))^(n*12))/((1+(i/12))^(n*12)-1),
    
    # Operational cost = 3% of annualized total capex
    opex = 3*annoftotcost/100, #Cost
    
    # Tax credit = 30% of annualized capex
    taxcr = 30*annoftotcost/100, #Return
    
    # Annualized using annual discount rate:
    anncost = annlzcost + opex
    )

solar_profit <- energy_cost %>%
  mutate(
    # Annualized Profit
    eannprof = elcrev + recredit + taxcr - anncost,
    
    eannprofworeap = elcrev + recredit + taxcr - annoftotcost,
    eannprofwoincentives = elcrev - annoftotcost
    )

write_xlsx(file = "Results/Solar Profit R25.xlsx",
           x = solar_profit,
           overwrite = TRUE,
           as_table = TRUE)
str(solar_profit)
head(solar_profit); tail(solar_profit)
```

### Plot Solar profit

Solar annual profit by number of solar panels

```{r PlotAPFS}
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
  for (i in unique(solar_profit$elcprc)) {
    b = ggplot(
      data = (solar_profit %>%
                dplyr::filter(elcprc == i)),
      mapping = aes(
        x = al_regs,
        y = eannprof, #Annual Profit
        #fill = energy,
        color = factor(panels),
        group = factor(panels)
      )
    ) +
      geom_line() +
      geom_point() +
      facet_grid(height ~ array) +
      scale_x_discrete(limits = lox,
                       labels = c("North", "Center", 
                                  "B Belt", "South")) +
      guides(color = guide_legend(ncol = 2, 
                                  reverse = TRUE))
    cat("Electricity Price = ", i)
    print(b)
  }
```

# Profit from crops

## Tomato

Filter return to operator, land and capital profit from Tomato:

```{r PFTFilter}
tomato_profit = tomato %>% 
  select(yldvar, yield, 
         rolac17, rolac18, rolac19, rolac20, 
         rolac21, rolac22, rolac23)
dim(tomato_profit)
tomato_profit
```

Convert data to long format:

```{r LDFTom}
# Assign column names for clarity
colnames(tomato_profit) <- c("yldvar", "yield",
                  "rolac17", "rolac18", "rolac19",
                  "rolac20", "rolac21", "rolac22",
                  "rolac23")

# Reshape the data frame from wide to long format
tomato_long <- melt(tomato_profit,
                id.vars = c("yldvar", "yield"),
                measure.vars = c("rolac17", "rolac18", "rolac19",
                                 "rolac20", "rolac21", "rolac22",
                                 "rolac23"),
                variable.name = "price",
                value.name = "profit")

# Convert the 'Price' column to numeric by extracting the number
tomato_long$price <- as.numeric(gsub("rolac", "", tomato_long$price))
str(tomato_long)
head(tomato_long); tail(tomato_long)
```

### Plot Tomato Profit

```{r PFT}
ggplot(data = tomato_long,
       mapping = aes(x = price,
                     y = profit,
                     color = factor(yldvar),
                     group = factor(yield))) +
  geom_line() +
  geom_point() +
  geom_hline(yintercept = 0,
             linetype = "dashed",
             color = "black") +
  guides(color = guide_legend(ncol = 2,
                              reverse = TRUE))
```

```{r}
ggplot(data = tomato_long,
       mapping = aes(x = yield,
                     y = profit,
                     #fill = yield,
                     color = factor(price),
                     group = factor(price))) +
  geom_line() +
  geom_point() +
  geom_hline(yintercept = 0,
             linetype = "dashed",
             color = "black") +
  # Vertical dashed line is 100% yield
  geom_vline(xintercept = tomato_long$yield[11],
             linetype = "dashed",
             color = "black") +
guides(color = guide_legend(reverse = TRUE))
```

## Strawberry

Filter return to operator, land and capital profit from strawberry

```{r SBRet}
strawberry_profit = strawberry %>% 
  select(yldvar, yield, 
         rolac3, rolac4, rolac5, rolac6, 
         rolac7, rolac8, rolac9)
str(strawberry_profit)
strawberry_profit
```

Convert data to long format:

```{r sblong}
# Assign column names for clarity
colnames(strawberry_profit) <- c("yldvar", "yield",
                  "rolac3", "rolac4", "rolac5",
                  "rolac6", "rolac7", "rolac8",
                  "rolac9")
# Reshape the data frame from wide to long format
stberry_long <- melt(strawberry_profit,
                id.vars = c("yldvar", "yield"),
                measure.vars = c("rolac3", "rolac4", "rolac5",
                                 "rolac6", "rolac7", "rolac8",
                                 "rolac9"),
                variable.name = "price",
                value.name = "profit")

# Convert the 'Price' column to numeric by extracting the number
stberry_long$price <- as.numeric(gsub("rolac", "", stberry_long$price))
str(stberry_long)
head(stberry_long); tail(stberry_long)
```

### Plot Strawberry Profit

```{r PlotSBPBYv}
ggplot(data = stberry_long,
       mapping = aes(x = price,
                     y = profit,
                     color = factor(yldvar),
                     group = factor(yield))) +
  geom_line() +
  geom_point() +
  geom_hline(yintercept = 0,
             linetype = "dashed",
             color = "black") +
  guides(color = guide_legend(ncol = 2,
                              reverse = TRUE))
```

```{r PlotSBPBP}
ggplot(data = stberry_long,
       mapping = aes(x = yield,
                     y = profit,
                     color = factor(price),
                     group = factor(price))) +
  geom_line() +
  geom_point() +
  geom_hline(yintercept = 0,
             linetype = "dashed",
             color = "black") +
  #Vertical dashed line is 100% yield
  geom_vline(xintercept = stberry_long$yield[11],
             linetype = "dashed",
             color = "black") +
  guides(color = guide_legend(reverse = TRUE))
```

## Squash

```{r}
squash_profit = squash %>% 
  dplyr::select(yldvar, yield, 
         rolac11, rolac12, rolac13, rolac14,
         rolac15, rolac16, rolac17)
# Reshape the data frame from wide to long format
squash_long <- melt(squash_profit,
                id.vars = c("yldvar", "yield"),
                measure.vars = c("rolac11", "rolac12", "rolac13",
                                 "rolac14","rolac15", "rolac16",
                                 "rolac17"),
                variable.name = "price",
                value.name = "profit")

# Convert the 'Price' column to numeric by extracting the number
squash_long$price <- as.numeric(gsub("rolac", "", squash_long$price))
head(squash_profit); tail(squash_profit)
head(squash_long); tail(squash_long)
```

# Profit from agrivoltaics

Total profit from solar and crops for all combinations of AVs simulated.

## Profit from TAV

-   Joint profit from tomato (tomato_long) and solar energy production (solar_profit) from 1 acre of land.
-   The last variable (tav_profit) is the final profit from tomato agrivoltaic system which is the result of our interest.

```{r TAV}
# Calculate all combinations of rows from both matrices in a vectorized way
solar_expanded <- solar_profit[rep(1:nrow(solar_profit), 
                                   each = nrow(tomato_long)), ]
tomato_expanded <- tomato_long[rep(1:nrow(tomato_long), 
                                   times = nrow(solar_profit)), ]

# Calculate the new column for tav_profit directly
tav_profit_values <- solar_expanded$eannprof + tomato_expanded$profit

# Combine the matrices and the calculated tav_profit column
tav_profit <- cbind(solar_expanded, 
                     tomato_expanded, 
                     tav_profit = tav_profit_values)

# Convert to a data frame and ensure the correct format
tav_profit <- as.data.frame(tav_profit)
tav_profit <- data.frame(lapply(tav_profit, unlist))
str(tav_profit)
head(tav_profit); tail(tav_profit)
```

### Saving results locally

```{r TAVSave}
write_feather(tav_profit,
  sink = "Data/tav_profit R25.feather",
  version = 2,
  chunk_size = 65536L,
  compression = c("default"),
  #compression = c("default", "lz4", "lz4_frame", "uncompressed", "zstd"),
  compression_level = NULL
)
tictoc::tic("Using Dplyr:")
write_xlsx(x = tav_profit %>% 
             dplyr::sample_n(100),
           file = "Results/TAV Profit Sample R25.xlsx",
           as_table = TRUE)
tictoc::toc()
```

```{r}
write_xlsx(x = tav_profit %>%
             filter(sprop %in% c(0, 0.25, 0.50, 0.75, 1),
                    yldvar == 1,
                    price == 20,
                    elcprc == 0.04)%>%
             dplyr::select(sprop, panels, height, array, 
                           al_regs, yldvar, yield, price, 
                           elcprc, tav_profit) %>% 
             mutate(al_regs1 = case_when(
               al_regs == "Northern" ~ 1,
    al_regs == "Central" ~ 2,
    al_regs == "Black Belt" ~ 3,
    al_regs == "Southern" ~ 4,
    TRUE ~ NA_real_)),
           file = "Results/Profit TAV WriteUp R25.xlsx",
           as_table = TRUE)
```

## Profit from SBAV

-   Joint profit from strawberry (stberry_long) and solar energy production (solar_profit) from 1 acre of land.
-   The last variable (sbav_profit) is the final profit from strawberry agrivoltaic system which is the result of our interest.

```{r SBAV}
# Generate all combinations of rows from both matrices in a vectorized way
solar_expanded <- solar_profit[rep(1:nrow(solar_profit), 
                                   each = nrow(stberry_long)), ]
stberry_expanded <- stberry_long[rep(1:nrow(stberry_long),
                                     times = nrow(solar_profit)), ]

# Calculate the new column for sbav_profit directly
sbav_profit_values <- solar_expanded$eannprof + stberry_expanded$profit

# Combine the matrices and the calculated sbav_profit column
sbav_profit <- cbind(solar_expanded, 
                     stberry_expanded, 
                     sbav_profit = sbav_profit_values)

# Convert to a data frame and ensure the correct format
sbav_profit <- as.data.frame(sbav_profit)
sbav_profit <- data.frame(lapply(sbav_profit, unlist))
str(sbav_profit)
head(sbav_profit); tail(sbav_profit)
```

### Saving results locally

```{r SBAVSave}
#write_csv(sbav_profit, "tav_profit.csv")
write_feather(sbav_profit,
  sink = "Data/sbav_profit R25.feather",
  version = 2,
  chunk_size = 65536L,
  compression = c("default"),
  #compression = c("default", "lz4", "lz4_frame", "uncompressed", "zstd"),
  compression_level = NULL
)
tictoc::tic("Using Base R Matrix:")
write_xlsx(x = sbav_profit[sample(nrow(tav_profit), 100),],
           file = "Results/SBAV Profit Sample R25.xlsx",
           as_table = TRUE)
tictoc::toc()
```

```{r}
write_xlsx(x = sbav_profit %>%
             filter(sprop %in% c(0, 0.25, 0.50, 0.75, 1),
                    yldvar == 1,
                    price == 9,
                    elcprc == 0.04)%>%
             dplyr::select(sprop, panels, height, array, al_regs, 
                           #price, elcprc, yldvar, yield, 
                           sbav_profit) %>% 
             mutate(al_regs1 = case_when(
               al_regs == "Northern" ~ 1,
    al_regs == "Central" ~ 2,
    al_regs == "Black Belt" ~ 3,
    al_regs == "Southern" ~ 4,
    TRUE ~ NA_real_)),
           file = "Results/Profit SBAV WriteUp R25.xlsx",
           as_table = TRUE)
```

## Profit from SQAV

```{r}
solar_expanded <- solar_profit[rep(1:nrow(solar_profit), 
                                   each = nrow(squash_long)), ]
squash_expanded <- squash_long[rep(1:nrow(squash_long), 
                                   times = nrow(solar_profit)), ]

# Calculate the new column for tav_profit directly
sqav_profit_values <- solar_expanded$eannprof + squash_expanded$profit

# Combine the matrices and the calculated tav_profit column
sqav_profit <- cbind(solar_expanded, 
                     squash_expanded, 
                     sqav_profit = sqav_profit_values)

# Convert to a data frame and ensure the correct format
sqav_profit <- as.data.frame(sqav_profit)
sqav_profit <- data.frame(lapply(sqav_profit, unlist))

write_feather(sqav_profit,
  sink = "Data/sqav_profit R25.feather",
  version = 2,
  chunk_size = 65536L,
  compression = c("default"),
  compression_level = NULL
)

write_xlsx(x = sqav_profit[sample(nrow(sqav_profit), 100),],
           file = "Results/SQAV Profit Sample R25.xlsx",
           as_table = TRUE)

write_xlsx(x = sqav_profit %>%
             filter(sprop %in% c(0, 0.25, 0.50, 0.75, 1),
                    yldvar == 1,
                    price == 14,
                    elcprc == 0.04)%>%
             dplyr::select(sprop, panels, height, array, 
                           al_regs, yldvar, yield, price, 
                           elcprc, sqav_profit) %>% 
             mutate(al_regs1 = case_when(
               al_regs == "Northern" ~ 1,
    al_regs == "Central" ~ 2,
    al_regs == "Black Belt" ~ 3,
    al_regs == "Southern" ~ 4,
    TRUE ~ NA_real_)),
           file = "Results/Profit SQAV WriteUp R25.xlsx",
           as_table = TRUE)
head(sqav_profit); tail(sqav_profit)
```
