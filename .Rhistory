col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
dim(strawberry)
head(strawberry)
tail(strawberry)
squash <- read_xlsx("Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 8,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
dim(squash)
head(squash)
tail(squash)
elec_price <- read_xlsx("Parameters.xlsx",
sheet = "Electricity Price") %>%
rename(epr_kwh = `Electricity Price ($/kWh)`)
dim(elec_price)
elec_price
pvsc <- wb_read(file = "Parameters.xlsx",
sheet = "PV system Cost (NREL)",
rows = c(1:109),
cols = c(1:5),
col_names = TRUE) %>%
rename(avtyps = `AV Types`,
item = Item,
cost = `Cost ($/W)`,
height = `Panel Height (ft.)`,
tcost = `Total Cost ($/W)`)
dim(pvsc)
head(pvsc)
tail(pvsc)
capex <- read.table(file = "CAPEX.txt",
header = TRUE,
sep = "\t") %>%
rename(capex = cost,
height = pheight,
array = tracker)
dim(capex)
capex
plottheme %>% ggplot(data = capex,
mapping = (aes(
x = height,
y = capex,
color = array,
group = array))) +
geom_point() +
geom_line() +
# geom_text(aes(label = "Tracker"),
#           nudge_x = 0.05,
#           nudge_y = 0.05,
#           size = 6) +
labs(
title = "CAPEX Cost by Solar Panel Height",
x = "Panel Height (ft.)",
y = "CAPEX Cost ($/W)",
color = "Array"
) +
scale_x_continuous(limits = c(4.5, 8.5)) +
scale_y_continuous(limits = c(1.5, 2.5)) +
guides(color = guide_legend(reverse = TRUE))
panconf <- wb_read(file = "Parameters.xlsx",
sheet = "Panel Spacing",
start_row = 2,
start_col = 1,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE)
# rename(avtyps = `AV Types`,
#        item = Item,
#        cost = `Cost ($/W)`,
#        height = `Panel Height (ft.)`,
#        tcost = `Total Cost ($/W)`)
dim(panconf)
head(panconf)
tail(panconf)
energy_output <- read_xlsx("Parameters.xlsx",
sheet = "Energy Output",
start_row = 1,
start_col = 1,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(sprop = `Solar Proportion`,
panels = `Total Panels`,
datalot = DataLot,
al_regs = `Region of AL`,
zips = ZIPCODE,
array = `Array Type`,
dc_kw = `DC System Size (kW)`,
energy = `Energy (kWh/Year)`) %>%
mutate(dc_kw = round(dc_kw, 2),
array = case_when(
array == "1AxisRot" ~ "Tracking",
array == "FixedOpen" ~ "Fixed",
TRUE ~ array))
dim(energy_output)
head(energy_output)
tail(energy_output)
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
ggplot(data = energy_output,
mapping = aes(x = al_regs,
y = energy,
#fill = energy,
color = factor(panels),
group = factor(panels))) +
geom_line()+
geom_point() +
facet_grid(datalot~array) +
scale_x_discrete(limits = lox) +
guides(color = guide_legend(reverse = TRUE))
ggplot(data = energy_output,
mapping = aes(x = al_regs,
y = energy,
#fill = energy,
color = factor(dc_kw),
group = factor(dc_kw))) +
geom_line()+
geom_point() +
facet_grid(datalot~array) +
scale_x_discrete(limits = lox) +
guides(color = guide_legend(reverse = TRUE))
# Convert to data frames if they are not already
matrix1 <- energy_output  %>%
group_by(sprop, al_regs, array, dc_kw, panels) %>%
#filter(datalot == 2) %>%
# Compute mean of datalot 1 and datalot 2:
summarise(
energy = mean(energy),
.groups = 'drop'
) # dimension of matrix is 168*6
matrix2 <- elec_price # dimension of matrix is 11*1
# Initialize the result data frame
# energy_revenue <- data.frame(matrix(nrow = 1848, ncol = 9))
energy_revenue <- data.frame(
matrix(nrow = nrow(matrix2)*nrow(matrix1),
ncol = ncol(matrix2)+ncol(matrix1)+1))
# Variable to keep track of the row index in the result matrix
row_index <- 1
# Loop through each value of the second matrix
for (i in 1:nrow(matrix2)) {
# Loop through each value of the second matrix
for (j in 1:nrow(matrix1)) {
# First matrix, second matrix, combined two matrices.
new_row <- c(matrix1[j, ],
matrix2[i, ],
matrix1$energy[j] * matrix2$epr_kwh[i])
# Assign the new row to the result matrix
energy_revenue[row_index, ] <- new_row
# Increment the row index
row_index <- row_index + 1
}
# Name the columns
colnames(energy_revenue) <- c(colnames(matrix1), "elcprc", "elcrev")
# Display the result
dim(energy_revenue)
head(energy_revenue); tail(energy_revenue)
# Check for any NAs in the result
if(any(is.na(energy_revenue))) {
na_indices <- which(is.na(energy_revenue), arr.ind = TRUE)
print(paste("NAs found at rows:", unique(na_indices[, 1])))
} else {
print("No NAs found in the result data frame.")
}
## | results='hide'
# Sample data
set.seed(123)
matrix1 <- energy_output # dimension of matrix is 176*7
matrix2 <- elec_price # dimension of matrix is 11*1
# Initializing the result matrix
result_matrix <- data.frame(matrix(ncol = nrow(matrix2),
nrow = 0))
colnames(result_matrix) <- c(colnames(matrix1),  "elcrev", "elcprc")
# Loop to multiply first and second matrices
for (i in 1:nrow(matrix2)) {
temp_matrix <- matrix1
temp_matrix$E_Prc <- matrix2[i, ]
temp_matrix$E_Rev <- matrix1$energy[j] * matrix2$epr_kwh[i]
result_matrix <- rbind(result_matrix, temp_matrix)
}
# Display the resulting matrix
dim(result_matrix)
head(result_matrix)
tail(result_matrix)
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
for (i in unique(energy_revenue$elcprc)) {
a = ggplot(data = (energy_revenue %>%
filter(elcprc == i)),
mapping = aes(x =al_regs,
y = elcrev,
#fill = energy,
color = factor(panels),
group = factor(panels)))+
geom_line()+
geom_point()+
facet_grid(.~array) +
scale_x_discrete(limits = lox) +
guides(color = guide_legend(reverse = TRUE))
cat("Electricity Price = ", i)
print(a)
}
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
for (i in unique(energy_revenue$elcprc)) {
a = ggplot(data = (energy_revenue %>%
filter(elcprc == i)),
mapping = aes(x =al_regs,
y = elcrev,
#fill = energy,
color = factor(sprop),
group = factor(sprop)))+
geom_line()+
geom_point()+
facet_grid(.~array) +
scale_x_discrete(limits = lox) +
guides(color = guide_legend(reverse = TRUE))
cat("Electricity Price = ", i)
print(a)
}
cat("energy_revenue dimension = ", dim(energy_revenue)) # 1936*9
names(energy_revenue)
cat("capex = ", dim(capex)) # 6*3
names(capex)
expanded_data <- energy_revenue %>%
slice(rep(1:n(),
each = 3))
capex_height <- rep(unique(capex$height),
length.out = nrow(energy_revenue))
energy_cost = cbind(expanded_data, capex_height) %>%
rename(height = capex_height)
energy_cost <- left_join(energy_cost,
capex,
by = c("array", "height")) %>%
mutate(ttlcost = capex*dc_kw,
anncost = ttlcost*(0.05*(1 + 0.05)^25)/((1 + 0.05)^25 - 1),
moncost = ttlcost*((0.05/12)*(1 + (0.05/12))^(25*12))/((1 + (0.05/12))^(25*12) - 1))
dim(energy_cost)
head(energy_cost)
tail(energy_cost)
solar_profit <- energy_cost %>%
mutate(eprofit = elcrev - ttlcost,
eannprof = elcrev - anncost,
emonprof = (elcrev/12) - moncost)
dim(solar_profit)
head(solar_profit)
tail(solar_profit)
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
for (i in unique(solar_profit$datalot)) {
for (j in unique(solar_profit$elcprc)) {
b = ggplot(
data = (solar_profit %>%
filter(datalot == i, elcprc == j)),
mapping = aes(
x = al_regs,
y = eprofit,
#fill = energy,
color = factor(panels),
group = factor(panels)
)
) +
geom_line() +
geom_point() +
facet_grid(height ~ array) +
scale_x_discrete(limits = lox) +
guides(color = guide_legend(reverse = TRUE))
cat("Datalot = ", i, "and ")
cat("Electricity Price = ", j)
print(b)
}
tomato_profit = tomato %>%
select(yldvar, yield,
rolac17, rolac18, rolac19, rolac20, rolac21, rolac22, rolac23)
dim(tomato_profit)
tomato_profit
# Assign column names for clarity
colnames(tomato_profit) <- c("yldvar", "yield",
"rolac17", "rolac18", "rolac19",
"rolac20", "rolac21", "rolac22",
"rolac23")
# Reshape the data frame from wide to long format
tomato_long <- melt(tomato_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("rolac17", "rolac18", "rolac19",
"rolac20", "rolac21", "rolac22",
"rolac23"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
tomato_long$price <- as.numeric(gsub("rolac", "", tomato_long$price))
# View the resulting data frame
dim(tomato_long)
head(tomato_long)
tail(tomato_long)
ggplot(data = tomato_long,
mapping = aes(x = price,
y = profit,
color = factor(yldvar),
group = factor(yield))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
ggplot(data = tomato_long,
mapping = aes(x = yield,
y = profit,
#fill = yield,
color = factor(price),
group = factor(price))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
# Vertical dashed line is 100% yield
geom_vline(xintercept = tomato_long$yield[11],
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
strawberry_profit = strawberry %>%
select(yldvar, yield,
rolac3, rolac4, rolac5, rolac6, rolac7, rolac8, rolac9)
dim(strawberry_profit)
strawberry_profit
# Assign column names for clarity
colnames(strawberry_profit) <- c("yldvar", "yield",
"rolac3", "rolac4", "rolac5",
"rolac6", "rolac7", "rolac8",
"rolac9")
# Reshape the data frame from wide to long format
stberry_long <- melt(strawberry_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("rolac3", "rolac4", "rolac5",
"rolac6", "rolac7", "rolac8",
"rolac9"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
stberry_long$price <- as.numeric(gsub("rolac", "", stberry_long$price))
# View the resulting data frame
dim(stberry_long)
head(stberry_long)
tail(stberry_long)
ggplot(data = stberry_long,
mapping = aes(x = price,
y = profit,
color = factor(yldvar),
group = factor(yield))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
ggplot(data = stberry_long,
mapping = aes(x = yield,
y = profit,
color = factor(price),
group = factor(price))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
#Vertical dashed line is 100% yield
geom_vline(xintercept = stberry_long$yield[11],
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
squash_profit = squash %>%
select(yldvar, yield,
rolac11, rolac12, rolac13, rolac14, rolac15, rolac16, rolac17)
squash_profit
# Assign column names for clarity
colnames(squash_profit) <- c("yldvar", "yield",
"rolac11", "rolac12", "rolac13",
"rolac14", "rolac15", "rolac16",
"rolac17")
# Reshape the data frame from wide to long format
squash_long <- melt(squash_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("rolac11", "rolac12", "rolac13",
"rolac14", "rolac15", "rolac16",
"rolac17"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
squash_long$price <- as.numeric(gsub("rolac", "", squash_long$price))
# View the resulting data frame
dim(squash_long)
head(squash_long)
tail(squash_long)
ggplot(data = squash_long,
mapping = aes(x = price,
y = profit,
color = factor(yldvar),
group = factor(yield))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
ggplot(data = squash_long,
mapping = aes(x = yield,
y = profit,
color = factor(price),
group = factor(price))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
# Vertical dashed line is 100% yield
geom_vline(xintercept = squash_long$yield[11],
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
# Generate all combinations of row indices from both matrices
index_combinations <- expand.grid(1:nrow(solar_profit),
1:nrow(tomato_long))
# Define a function to process each combination of indices
process_combination <- function(indices) {
i <- indices[1]
j <- indices[2]
f()
new_row <- c(solar_profit[i, ],
tomato_long[j, ],
#solar_profit[i, 14] = eannprof
solar_profit$eannprof[i] + tomato_long$profit[j])
return(new_row)
}
# Apply the function to each combination of indices and combine the results into a matrix
tav_profit <- do.call(rbind,
lapply(
seq_len(nrow(index_combinations)),
function(k) {
indices <- as.integer(
index_combinations[k, ])
process_combination(indices)
}))
# Optionally, you can convert the result back to a data frame if needed
tav_profit <- as.data.frame(tav_profit) %>%
rename(tav_profit = V19)
tav_profit <- data.frame(lapply(tav_profit, unlist))
str(tav_profit)
head(tav_profit)
tail(tav_profit)
#write_csv(tav_profit, "tav_profit.csv")
write_feather(tav_profit,
sink = "tav_profit.feather",
version = 2,
chunk_size = 65536L,
compression = c("default"),
#compression = c("default", "lz4", "lz4_frame", "uncompressed", "zstd"),
compression_level = NULL
)
# Define a function to process each combination of indices
process_combination <- function(indices) {
i <- indices[1]
j <- indices[2]
#  f() #progress bar
new_row <- c(solar_profit[i, ],
tomato_long[j, ],
#solar_profit[i, 14] = eannprof
solar_profit$eannprof[i] + tomato_long$profit[j])
return(new_row)
}
# Apply the function to each combination of indices and combine the results into a matrix
tav_profit <- do.call(rbind,
lapply(
seq_len(nrow(index_combinations)),
function(k) {
indices <- as.integer(
index_combinations[k, ])
process_combination(indices)
}))
# Generate all combinations of row indices from both matrices
index_combinations <- expand.grid(1:nrow(solar_profit),
1:nrow(tomato_long))
# Define a function to process each combination of indices
process_combination <- function(indices) {
i <- indices[1]
j <- indices[2]
f() #progress bar
new_row <- c(solar_profit[i, ],
tomato_long[j, ],
#solar_profit[i, 14] = eannprof
solar_profit$eannprof[i] + tomato_long$profit[j])
return(new_row)
}
# Apply the function to each combination of indices and combine the results into a matrix
tav_profit <- do.call(rbind,
lapply(
seq_len(nrow(index_combinations)),
function(k) {
indices <- as.integer(
index_combinations[k, ])
process_combination(indices)
}))
