skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
str(strawberry)
head(strawberry); tail(strawberry)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 8,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
str(squash)
head(squash); tail(squash)
elec_price <- read_xlsx("Data/Parameters.xlsx",
sheet = "Electricity Price") %>%
rename(epr_kwh = `Electricity Price ($/kWh)`)
str(elec_price)
elec_price
pvsc <- wb_read(file = "Data/Parameters.xlsx",
sheet = "PV system Cost (NREL)",
rows = c(1:109),
cols = c(1:5),
col_names = TRUE) %>%
rename(avtyps = `AV Types`,
item = Item,
cost = `Cost ($/W)`,
height = `Panel Height (ft.)`,
tcost = `Total Cost ($/W)`
)
str(pvsc)
head(pvsc); tail(pvsc)
capex <- read.table(file = "Data/CAPEX.txt",
header = TRUE,
sep = "\t") %>%
rename(capex = cost,
height = pheight,
array = tracker)
str(capex)
capex
capex %>%
ggplot(aes(
x = height,
y = capex,
color = array,
group = array
)) +
geom_point() +
geom_line() +
# Display the rounded capex values
geom_text(aes(label = sprintf("%.2f", capex)),
vjust = -0.8,
hjust = 0.8,
size = 2,
check_overlap = TRUE,
show.legend = FALSE
) +
labs(
#title = "CAPEX Cost by Solar Panel Height",
x = "Solar Panel Clearance Height (ft.)",
y = "CAPEX Cost ($/W)",
color = "Array Types:"
) +
scale_x_continuous(limits = c(4.5, 8.5)) +
scale_y_continuous(limits = c(1.5, 2.5)) +
guides(color = guide_legend(reverse = TRUE)) +
theme(
plot.background = element_rect(
fill = "grey",
color = "black"
),
legend.position = "inside",
legend.position.inside = c(0.2, 0.8),
legend.background = element_rect(
fill = "white",
color = "black"
),
plot.margin = margin(10, 10, 10, 10)
) +
scale_color_manual(
values = c("Fixed" = "blue",
"Tracking" = "red"),
labels = c("Fixed Open Rack",
"Single Axis Rotation")
)
# Save the plot
ggsave(
filename = "Plots/CAPEX Solar Panels.png",
width = 8,
height = 6,
units = "in"
)
panconf <- wb_read(file = "Data/Parameters.xlsx",
sheet = "Panel Spacing",
start_row = 2,
start_col = 1,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE)
str(panconf)
head(panconf); tail(panconf)
energy_output <- read_xlsx("Data/Parameters.xlsx",
sheet = "Energy Output",
start_row = 1,
start_col = 1,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(sprop = `Solar Proportion`,
panels = `Total Panels`,
datalot = DataLot,
al_regs = `Region of AL`,
zips = ZIPCODE,
array = `Array Type`,
dc_kw = `DC System Size (kW)`,
energy = `Energy (kWh/Year)`) %>%
mutate(
dc_kw = round(dc_kw,2),
array = case_when(
array == "1AxisRot" ~ "Tracking",
array == "FixedOpen" ~ "Fixed",
TRUE ~ array)
)
str(energy_output)
head(energy_output); tail(energy_output)
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
ggplot(data = energy_output,
mapping = aes(x = al_regs,
y = energy,
#fill = energy,
color = factor(panels),
group = factor(panels))) +
geom_line()+
geom_point() +
facet_grid(datalot~array) +
scale_x_discrete(limits = lox,
labels = c("North", "Center", "B Belt", "South")) +
guides(color = guide_legend(ncol = 2, reverse = TRUE))
lox <- c("Northern", "Central", "Black Belt", "Southern")
ggplot(data = energy_output,
mapping = aes(x = al_regs,
y = energy,
#fill = energy,
color = factor(dc_kw),
group = factor(dc_kw))) +
geom_line()+
geom_point() +
facet_grid(datalot~array) +
scale_x_discrete(limits = lox,
labels = c("North", "Center", "B Belt", "South")) +
guides(color = guide_legend(ncol = 2, reverse = TRUE))
# Convert to data frames if they are not already
matrix1 <- energy_output  %>%
group_by(sprop, al_regs, array, dc_kw, panels) %>%
dplyr::filter(datalot == 2) %>%
# Compute mean of datalot 1 and datalot 2:
summarise(
energy = mean(energy),
.groups = 'drop'
) # dimension of matrix is 168*6
matrix2 <- elec_price # dimension of matrix is 11*1
# Initialize the result data frame
# energy_revenue <- data.frame(matrix(nrow = 1848, ncol = 9))
energy_revenue <- data.frame(
matrix(nrow = nrow(matrix2)*nrow(matrix1),
ncol = ncol(matrix2)+ncol(matrix1)+1))
# Variable to keep track of the row index in the result matrix
row_index <- 1
# Loop through each value of the second matrix
for (i in 1:nrow(matrix2)) {
# Loop through each value of the second matrix
for (j in 1:nrow(matrix1)) {
# First matrix, second matrix, combined two matrices.
new_row <- c(matrix1[j, ],
matrix2[i, ],
matrix1$energy[j] * matrix2$epr_kwh[i])
# Assign the new row to the result matrix
energy_revenue[row_index, ] <- new_row
# Increment the row index
row_index <- row_index + 1
}
# Name the columns
colnames(energy_revenue) <- c(colnames(matrix1), "elcprc", "elcrev")
# Check for any NAs in the result
if(any(is.na(energy_revenue))) {
na_indices <- which(is.na(energy_revenue), arr.ind = TRUE)
print(paste("NAs found at rows:", unique(na_indices[, 1])))
} else {
print("No NAs found in the result data frame.")
}
str(energy_revenue)
head(energy_revenue); tail(energy_revenue)
## | results='hide'
# Sample data
set.seed(123)
matrix1 <- energy_output # dimension of matrix is 176*7
matrix2 <- elec_price # dimension of matrix is 11*1
# Initializing the result matrix
result_matrix <- data.frame(matrix(ncol = nrow(matrix2),
nrow = 0))
colnames(result_matrix) <- c(colnames(matrix1),  "elcrev", "elcprc")
# Loop to multiply first and second matrices
for (i in 1:nrow(matrix2)) {
temp_matrix <- matrix1
temp_matrix$E_Prc <- matrix2[i, ]
temp_matrix$E_Rev <- matrix1$energy[j] * matrix2$epr_kwh[i]
result_matrix <- rbind(result_matrix, temp_matrix)
}
str(result_matrix)
head(result_matrix); tail(result_matrix)
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
for (i in unique(energy_revenue$elcprc)) {
a = ggplot(data = (energy_revenue %>%
dplyr::filter(elcprc == i)),
mapping = aes(x =al_regs,
y = elcrev,
#fill = energy,
color = factor(panels),
group = factor(panels)))+
geom_line()+
geom_point()+
facet_grid(.~array) +
scale_x_discrete(limits = lox,
labels = c("North", "Center", "B Belt", "South")) +
guides(color = guide_legend(ncol = 2, reverse = TRUE))
cat("Electricity Price = ", i)
print(a)
}
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
for (i in unique(energy_revenue$elcprc)) {
a = ggplot(data = (energy_revenue %>%
dplyr::filter(elcprc == i)),
mapping = aes(x =al_regs,
y = elcrev,
#fill = energy,
color = factor(sprop),
group = factor(sprop)))+
geom_line()+
geom_point()+
facet_grid(.~array) +
scale_x_discrete(limits = lox,
labels = c("North", "Center", "B Belt", "South")) +
guides(color = guide_legend(ncol = 2, reverse = TRUE))
cat("Electricity Price = ", i)
print(a)
}
i = 0.07 # Discount/interest Rate
n = 25 # Life Span of solar panels (Years)
reapprop = 50/100  # Percentage of CAPEX covered by REAP program.
expanded_data <- energy_revenue %>%
slice(rep(1:n(),
each = 3))
capex_height <- rep(unique(capex$height),
length.out = nrow(energy_revenue))
energy_cost = cbind(expanded_data, capex_height) %>%
rename(height = capex_height)
energy_cost <- left_join(energy_cost,
capex,
by = c("array", "height")) %>%
mutate(
# 7.75*3.5 sq.ft. panel energy output = 545 W.
# Operational cost (OPEX) = $15/kW-yr; 1 kW = 1,000W.
# Opex = 545*15/1000*panels,
# Land lease cost Per acre.
landlease = 1000,
# Total Capex
ttlcost = capex*545*panels,
# Cost of Insurance = $5/$1000/Yr Total capex
inscst = ttlcost*5/1000, #Cost
# Renewable energy credit 6.60 $/MWh
recredit = 6.60/1000*energy, #Return
# REAP Program = 50% of Capex - Simple interest rmbrst delay
reap = reapprop*ttlcost - (reapprop*ttlcost)*i*0.5/100, #Return
# Annualized cost - reap:
annlzcost = (ttlcost - reap)*(i*(1+i)^n)/((1+i)^n-1),
# Annualized Cost of total cost:
annoftotcost = ttlcost*(i*(1+i)^n)/((1+i)^n-1),
# Monthalized using monthly discount rate:
monthlycost = ttlcost*
((i/12)*(1+(i/n))^(n*12))/((1+(i/12))^(n*12)-1),
# Operational cost = 3% of annualized total capex
opex = 3*annoftotcost/100, #Cost
# Tax credit = 30% of annualized capex
taxcr = 30*annoftotcost/100, #Return
# Annualized using annual discount rate:
anncost = annlzcost + opex
)
solar_profit <- energy_cost %>%
mutate(
# Annualized Profit
eannprof = elcrev + recredit + taxcr - anncost,
eannprofworeap = elcrev + recredit + taxcr - annoftotcost,
eannprofwoincentives = elcrev - annoftotcost
)
write_xlsx(file = "Results/Solar Profit.xlsx",
x = solar_profit,
overwrite = TRUE,
as_table = TRUE)
str(solar_profit)
head(solar_profit); tail(solar_profit)
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
for (i in unique(solar_profit$elcprc)) {
b = ggplot(
data = (solar_profit %>%
dplyr::filter(elcprc == i)),
mapping = aes(
x = al_regs,
y = eannprof, #Annual Profit
#fill = energy,
color = factor(panels),
group = factor(panels)
)
) +
geom_line() +
geom_point() +
facet_grid(height ~ array) +
scale_x_discrete(limits = lox,
labels = c("North", "Center",
"B Belt", "South")) +
guides(color = guide_legend(ncol = 2,
reverse = TRUE))
cat("Electricity Price = ", i)
print(b)
}
tomato_profit = tomato %>%
select(yldvar, yield,
rolac17, rolac18, rolac19, rolac20,
rolac21, rolac22, rolac23)
dim(tomato_profit)
tomato_profit
# Assign column names for clarity
colnames(tomato_profit) <- c("yldvar", "yield",
"rolac17", "rolac18", "rolac19",
"rolac20", "rolac21", "rolac22",
"rolac23")
# Reshape the data frame from wide to long format
tomato_long <- melt(tomato_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("rolac17", "rolac18", "rolac19",
"rolac20", "rolac21", "rolac22",
"rolac23"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
tomato_long$price <- as.numeric(gsub("rolac", "", tomato_long$price))
str(tomato_long)
head(tomato_long); tail(tomato_long)
ggplot(data = tomato_long,
mapping = aes(x = price,
y = profit,
color = factor(yldvar),
group = factor(yield))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
guides(color = guide_legend(ncol = 2,
reverse = TRUE))
ggplot(data = tomato_long,
mapping = aes(x = yield,
y = profit,
#fill = yield,
color = factor(price),
group = factor(price))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
# Vertical dashed line is 100% yield
geom_vline(xintercept = tomato_long$yield[11],
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
strawberry_profit = strawberry %>%
select(yldvar, yield,
rolac3, rolac4, rolac5, rolac6,
rolac7, rolac8, rolac9)
str(strawberry_profit)
strawberry_profit
# Assign column names for clarity
colnames(strawberry_profit) <- c("yldvar", "yield",
"rolac3", "rolac4", "rolac5",
"rolac6", "rolac7", "rolac8",
"rolac9")
# Reshape the data frame from wide to long format
stberry_long <- melt(strawberry_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("rolac3", "rolac4", "rolac5",
"rolac6", "rolac7", "rolac8",
"rolac9"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
stberry_long$price <- as.numeric(gsub("rolac", "", stberry_long$price))
str(stberry_long)
head(stberry_long); tail(stberry_long)
ggplot(data = stberry_long,
mapping = aes(x = price,
y = profit,
color = factor(yldvar),
group = factor(yield))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
guides(color = guide_legend(ncol = 2,
reverse = TRUE))
ggplot(data = stberry_long,
mapping = aes(x = yield,
y = profit,
color = factor(price),
group = factor(price))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
#Vertical dashed line is 100% yield
geom_vline(xintercept = stberry_long$yield[11],
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
# Calculate all combinations of rows from both matrices in a vectorized way
solar_expanded <- solar_profit[rep(1:nrow(solar_profit),
each = nrow(tomato_long)), ]
tomato_expanded <- tomato_long[rep(1:nrow(tomato_long),
times = nrow(solar_profit)), ]
# Calculate the new column for tav_profit directly
tav_profit_values <- solar_expanded$eannprof + tomato_expanded$profit
# Combine the matrices and the calculated tav_profit column
tav_profit <- cbind(solar_expanded,
tomato_expanded,
tav_profit = tav_profit_values)
# Convert to a data frame and ensure the correct format
tav_profit <- as.data.frame(tav_profit)
tav_profit <- data.frame(lapply(tav_profit, unlist))
str(tav_profit)
head(tav_profit); tail(tav_profit)
write_feather(tav_profit,
sink = "Data/tav_profit.feather",
version = 2,
chunk_size = 65536L,
compression = c("default"),
#compression = c("default", "lz4", "lz4_frame", "uncompressed", "zstd"),
compression_level = NULL
)
tictoc::tic("Using Dplyr:")
write_xlsx(x = tav_profit %>%
dplyr::sample_n(100),
file = "Results/TAV Profit Sample.xlsx",
as_table = TRUE)
tictoc::toc()
# Generate all combinations of rows from both matrices in a vectorized way
solar_expanded <- solar_profit[rep(1:nrow(solar_profit),
each = nrow(stberry_long)), ]
stberry_expanded <- stberry_long[rep(1:nrow(stberry_long),
times = nrow(solar_profit)), ]
# Calculate the new column for sbav_profit directly
sbav_profit_values <- solar_expanded$eannprof + stberry_expanded$profit
# Combine the matrices and the calculated sbav_profit column
sbav_profit <- cbind(solar_expanded,
stberry_expanded,
sbav_profit = sbav_profit_values)
# Convert to a data frame and ensure the correct format
sbav_profit <- as.data.frame(sbav_profit)
sbav_profit <- data.frame(lapply(sbav_profit, unlist))
str(sbav_profit)
head(sbav_profit); tail(sbav_profit)
#write_csv(sbav_profit, "tav_profit.csv")
write_feather(sbav_profit,
sink = "Data/sbav_profit.feather",
version = 2,
chunk_size = 65536L,
compression = c("default"),
#compression = c("default", "lz4", "lz4_frame", "uncompressed", "zstd"),
compression_level = NULL
)
tictoc::tic("Using Base R Matrix:")
write_xlsx(x = sbav_profit[sample(nrow(tav_profit), 100),],
file = "Results/SBAV Profit Sample.xlsx",
as_table = TRUE)
tictoc::toc()
names
names(tav_profit)
runApp('AV Shiny.R')
names(tomato)
names(strawberry)
names(squash)
runApp('AV Shiny.R')
library(shiny); runApp('AV Shiny.R')
runApp('AV Shiny.R')
library(shiny); runApp('AV Shiny.R')
runApp('AV Shiny.R')
runApp('Agrivoltaics')
getwd)
getwd()
runApp('Agrivoltaics')
runApp('AV Shiny.R')
