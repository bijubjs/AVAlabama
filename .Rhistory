fontsize_col = 22
)
ggsave(heatmap_plot,
height = 18,
width = 24,
units = "in",
limitsize = FALSE,
file = paste0("Plots/TAV Profits CTab R25", ".png"))
#rm(colorcount); rm(heatmap_plot)
# Calculate color count based on unique values, excluding zero
colorcount <- length(unique(as.vector(as.matrix(ct_sbav_pft[-1]))))
# Define custom breaks to ensure zero is distinctly marked
# Calculate min and max values to define the range
min_val <- min(ct_sbav_pft, na.rm = TRUE)
max_val <- max(ct_sbav_pft, na.rm = TRUE)
# Create breaks that ensure zero is in the middle
breaks <- seq(min_val, max_val, length.out = colorcount)
# Separate color palettes for negative and positive values
# Negative values: Shades of red
neg_colors <- colorRampPalette(c("#890800",
"#FF1709",
"#FF8F89"))(sum(breaks < 0))
# Define the color for zero separately
zero_color <- "#FF8F89"
# Positive values: Shades of green
pos_colors <- colorRampPalette(c("#99E699",
"#32CD32",
"#196719"))(sum(breaks > 0))
# Combine negative colors, zero, and positive colors
custom_colors <- c(neg_colors,
zero_color,
pos_colors)
# Generate heatmap with the custom color scheme
heatmap_plot <- pheatmap(
(ct_sbav_pft),
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = custom_colors,
breaks = breaks,
cutree_rows = 5,
cutree_cols = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = TRUE,
number_color = "black",
fontsize_number = 5,
number_format = "%.0f",
cellheight = 24,
cellwidth = 23,
fontsize = 18,
fontsize_row = 22,
fontsize_col = 22
)
ggsave(heatmap_plot,
height = 18,
width = 24,
units = "in",
limitsize = FALSE,
file = paste0("Plots/SBAV Profits Ctab R25", ".png"))
# Calculate color count based on unique values, excluding zero
colorcount <- length(unique(as.vector(as.matrix(ct_sbav_pft[-1]))))
# Define custom breaks to ensure zero is distinctly marked
# Calculate min and max values to define the range
min_val <- min(ct_sbav_pft, na.rm = TRUE)
max_val <- max(ct_sbav_pft, na.rm = TRUE)
# Create breaks that ensure zero is in the middle
breaks <- seq(min_val, max_val, length.out = colorcount)
# Separate color palettes for negative and positive values
# Negative values: Shades of red
neg_colors <- colorRampPalette(c("#890800",
"#FF1709",
"#FF8F89"))(sum(breaks < 0))
# Define the color for zero separately
zero_color <- "#FF8F89"
# Positive values: Shades of green
pos_colors <- colorRampPalette(c("#99E699",
"#32CD32",
"#196719"))(sum(breaks > 0))
# Combine negative colors, zero, and positive colors
custom_colors <- c(neg_colors,
zero_color,
pos_colors)
# Generate heatmap with the custom color scheme
heatmap_plot <- pheatmap(
(ct_sbav_pft),
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = custom_colors,
breaks = breaks,
cutree_rows = 5,
cutree_cols = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
number_color = "black",
fontsize_number = 5,
number_format = "%.0f",
cellheight = 24,
cellwidth = 23,
fontsize = 18,
fontsize_row = 22,
fontsize_col = 22
)
ggsave(heatmap_plot,
height = 18,
width = 24,
units = "in",
limitsize = FALSE,
file = paste0("Plots/SBAV Profits Ctab R25", ".png"))
{r}
# Calculate color count based on unique values, excluding zero
colorcount <- length(unique(as.vector(as.matrix(ct_sbav_pft[-1]))))
# Define custom breaks to ensure zero is distinctly marked
# Calculate min and max values to define the range
min_val <- min(ct_sbav_pft, na.rm = TRUE)
max_val <- max(ct_sbav_pft, na.rm = TRUE)
# Create breaks that ensure zero is in the middle
breaks <- seq(min_val, max_val, length.out = colorcount)
# Separate color palettes for negative and positive values
# Negative values: Shades of red
neg_colors <- colorRampPalette(c("#890800",
"#FF1709",
"#FF8F89"))(sum(breaks < 0))
# Define the color for zero separately
zero_color <- "#FF8F89"
# Positive values: Shades of green
pos_colors <- colorRampPalette(c("#99E699",
"#32CD32",
"#196719"))(sum(breaks > 0))
# Combine negative colors, zero, and positive colors
custom_colors <- c(neg_colors,
zero_color,
pos_colors)
# Generate heatmap with the custom color scheme
heatmap_plot <- pheatmap(
(ct_sbav_pft),
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = custom_colors,
breaks = breaks,
cutree_rows = 5,
cutree_cols = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = TRUE,
number_color = "black",
fontsize_number = 5,
number_format = "%.0f",
cellheight = 24,
cellwidth = 23,
fontsize = 18,
fontsize_row = 22,
fontsize_col = 22
)
ggsave(heatmap_plot,
height = 18,
width = 24,
units = "in",
limitsize = FALSE,
file = paste0("Plots/SBAV Profits Ctab Values R25",
".png"))
# Calculate color count based on unique values, excluding zero
colorcount <- length(unique(as.vector(as.matrix(ct_tav_pft[-1]))))
# Define custom breaks to ensure zero is distinctly marked
# Calculate min and max values to define the range
min_val <- min(ct_tav_pft, na.rm = TRUE)
max_val <- max(ct_tav_pft, na.rm = TRUE)
# Create breaks that ensure zero is in the middle
breaks <- seq(min_val, max_val, length.out = colorcount)
# Separate color palettes for negative and positive values
# Negative values: Shades of red
neg_colors <- colorRampPalette(c("#890800",
"#FF1709",
"#FF8F89"))(sum(breaks < 0))
# Define the color for zero separately
zero_color <- "#FF8F89"
# Positive values: Shades of green
pos_colors <- colorRampPalette(c("#99E699",
"#32CD32",
"#196719"))(sum(breaks > 0))
# Combine negative colors, zero, and positive colors
custom_colors <- c(neg_colors,
zero_color,
pos_colors)
# Generate heatmap with the custom color scheme
heatmap_plot <- pheatmap(
(ct_tav_pft),
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = custom_colors,
breaks = breaks,
cutree_rows = 5,
cutree_cols = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = TRUE,
fontsize_number = 5,
number_color = "black",
number_format = "%.0f",
cellheight = 24,
cellwidth = 23,
fontsize = 18,
fontsize_row = 22,
fontsize_col = 22
)
ggsave(heatmap_plot,
height = 18,
width = 24,
units = "in",
limitsize = FALSE,
file = paste0("Plots/TAV Profits CTab Values R25", ".png"))
#rm(colorcount); rm(heatmap_plot)
# Calculate color count based on unique values, excluding zero
colorcount <- length(unique(as.vector(as.matrix(ct_sbav_pft[-1]))))
# Define custom breaks to ensure zero is distinctly marked
# Calculate min and max values to define the range
min_val <- min(ct_sbav_pft, na.rm = TRUE)
max_val <- max(ct_sbav_pft, na.rm = TRUE)
# Create breaks that ensure zero is in the middle
breaks <- seq(min_val, max_val, length.out = colorcount)
# Separate color palettes for negative and positive values
# Negative values: Shades of red
neg_colors <- colorRampPalette(c("#890800",
"#FF1709",
"#FF8F89"))(sum(breaks < 0))
# Define the color for zero separately
zero_color <- "#FF8F89"
# Positive values: Shades of green
pos_colors <- colorRampPalette(c("#99E699",
"#32CD32",
"#196719"))(sum(breaks > 0))
# Combine negative colors, zero, and positive colors
custom_colors <- c(neg_colors,
zero_color,
pos_colors)
# Generate heatmap with the custom color scheme
heatmap_plot <- pheatmap(
(ct_sbav_pft),
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = custom_colors,
breaks = breaks,
cutree_rows = 5,
cutree_cols = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = TRUE,
number_color = "black",
fontsize_number = 5,
number_format = "%.0f",
cellheight = 24,
cellwidth = 23,
fontsize = 18,
fontsize_row = 22,
fontsize_col = 22
)
ggsave(heatmap_plot,
height = 18,
width = 24,
units = "in",
limitsize = FALSE,
file = paste0("Plots/SBAV Profits Ctab Values R25",
".png"))
# Calculate color count based on unique values, excluding zero
colorcount <- length(unique(as.vector(as.matrix(ct_tav_pft[-1]))))
# Define custom breaks to ensure zero is distinctly marked
# Calculate min and max values to define the range
min_val <- min(ct_tav_pft, na.rm = TRUE)
max_val <- max(ct_tav_pft, na.rm = TRUE)
# Create breaks that ensure zero is in the middle
breaks <- seq(min_val, max_val, length.out = colorcount)
# Separate color palettes for negative and positive values
# Negative values: Shades of red
neg_colors <- colorRampPalette(c("#890800",
"#FF1709",
"#FF8F89"))(sum(breaks < 0))
# Define the color for zero separately
zero_color <- "#FF8F89"
# Positive values: Shades of green
pos_colors <- colorRampPalette(c("#99E699",
"#32CD32",
"#196719"))(sum(breaks > 0))
# Combine negative colors, zero, and positive colors
custom_colors <- c(neg_colors,
zero_color,
pos_colors)
# Generate heatmap with the custom color scheme
heatmap_plot <- pheatmap((ct_tav_pft),
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = custom_colors,
breaks = breaks,
cutree_rows = 5,
cutree_cols = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = TRUE,
number_color = "black",
fontsize_number = 5,
number_format = "%.0f",
cellheight = 24,
cellwidth = 23,
fontsize = 18,
fontsize_row = 22,
fontsize_col = 22)
ggsave(heatmap_plot,
height = 18,
width = 24,
units = "in",
limitsize = FALSE,
file = paste0("Plots/TAV Profits CTab Values R50", ".png"))
rm(breaks, colorcount, custom_colors, max_val, min_val, neg_colors)
rm(pos_colors, zero_color, heatmap_plot)
# Calculate color count based on unique values, excluding zero
colorcount <- length(unique(as.vector(as.matrix(ct_tav_pft[-1]))))
# Define custom breaks to ensure zero is distinctly marked
# Calculate min and max values to define the range
min_val <- min(ct_tav_pft, na.rm = TRUE)
max_val <- max(ct_tav_pft, na.rm = TRUE)
# Create breaks that ensure zero is in the middle
breaks <- seq(min_val, max_val, length.out = colorcount)
# Separate color palettes for negative and positive values
# Negative values: Shades of red
neg_colors <- colorRampPalette(c("#890800",
"#FF1709",
"#FF8F89"))(sum(breaks < 0))
# Define the color for zero separately
zero_color <- "#FF8F89"
# Positive values: Shades of green
pos_colors <- colorRampPalette(c("#99E699",
"#32CD32",
"#196719"))(sum(breaks > 0))
# Combine negative colors, zero, and positive colors
custom_colors <- c(neg_colors,
zero_color,
pos_colors)
# Generate heatmap with the custom color scheme
heatmap_plot <- pheatmap((ct_tav_pft),
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = custom_colors,
breaks = breaks,
cutree_rows = 5,
cutree_cols = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
number_color = "black",
fontsize_number = 5,
number_format = "%.0f",
cellheight = 24,
cellwidth = 23,
fontsize = 18,
fontsize_row = 22,
fontsize_col = 22)
ggsave(heatmap_plot,
height = 18,
width = 24,
units = "in",
limitsize = FALSE,
file = paste0("Plots/TAV Profits CTab R50", ".png"))
rm(breaks, colorcount, custom_colors, max_val, min_val, neg_colors)
rm(pos_colors, zero_color, heatmap_plot)
# Calculate color count based on unique values, excluding zero
colorcount <- length(unique(as.vector(as.matrix(ct_sbav_pft[-1]))))
# Define custom breaks to ensure zero is distinctly marked
# Calculate min and max values to define the range
min_val <- min(ct_sbav_pft, na.rm = TRUE)
max_val <- max(ct_sbav_pft, na.rm = TRUE)
# Create breaks that ensure zero is in the middle
breaks <- seq(min_val, max_val, length.out = colorcount)
# Separate color palettes for negative and positive values
# Negative values: Shades of red
neg_colors <- colorRampPalette(c("#890800",
"#FF1709",
"#FF8F89"))(sum(breaks < 0))
# Define the color for zero separately
zero_color <- "#FF8F89"
# Positive values: Shades of green
pos_colors <- colorRampPalette(c("#99E699",
"#32CD32",
"#196719"))(sum(breaks > 0))
# Combine negative colors, zero, and positive colors
custom_colors <- c(neg_colors,
zero_color,
pos_colors)
# Generate heatmap with the custom color scheme
heatmap_plot <- pheatmap(
(ct_sbav_pft),
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = custom_colors,
breaks = breaks,
cutree_rows = 5,
cutree_cols = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = TRUE,
number_color = "black",
fontsize_number = 5,
number_format = "%.0f",
cellheight = 24,
cellwidth = 23,
fontsize = 18,
fontsize_row = 22,
fontsize_col = 22
)
ggsave(heatmap_plot,
height = 18,
width = 24,
units = "in",
limitsize = FALSE,
file = paste0("Plots/SBAV Profits Ctab R50", ".png"))
rm(breaks, colorcount, custom_colors, max_val, min_val, neg_colors)
rm(pos_colors, zero_color, heatmap_plot)
# Calculate color count based on unique values, excluding zero
colorcount <- length(unique(as.vector(as.matrix(ct_sbav_pft[-1]))))
# Define custom breaks to ensure zero is distinctly marked
# Calculate min and max values to define the range
min_val <- min(ct_sbav_pft, na.rm = TRUE)
max_val <- max(ct_sbav_pft, na.rm = TRUE)
# Create breaks that ensure zero is in the middle
breaks <- seq(min_val, max_val, length.out = colorcount)
# Separate color palettes for negative and positive values
# Negative values: Shades of red
neg_colors <- colorRampPalette(c("#890800",
"#FF1709",
"#FF8F89"))(sum(breaks < 0))
# Define the color for zero separately
zero_color <- "#FF8F89"
# Positive values: Shades of green
pos_colors <- colorRampPalette(c("#99E699",
"#32CD32",
"#196719"))(sum(breaks > 0))
# Combine negative colors, zero, and positive colors
custom_colors <- c(neg_colors,
zero_color,
pos_colors)
# Generate heatmap with the custom color scheme
heatmap_plot <- pheatmap(
(ct_sbav_pft),
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = custom_colors,
breaks = breaks,
cutree_rows = 5,
cutree_cols = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = TRUE,
number_color = "black",
fontsize_number = 5,
number_format = "%.0f",
cellheight = 24,
cellwidth = 23,
fontsize = 18,
fontsize_row = 22,
fontsize_col = 22
)
ggsave(heatmap_plot,
height = 18,
width = 24,
units = "in",
limitsize = FALSE,
file = paste0("Plots/SBAV Profits Ctab Values R50", ".png"))
rm(breaks, colorcount, custom_colors, max_val, min_val, neg_colors)
rm(pos_colors, zero_color, heatmap_plot)
