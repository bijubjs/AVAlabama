expanded_data <- energy_revenue %>%
slice(rep(1:n(),
each = 3))
capex_height <- rep(unique(capex$height),
length.out = nrow(energy_revenue))
energy_cost = cbind(expanded_data, capex_height) %>%
rename(height = capex_height)
energy_cost <- left_join(energy_cost,
capex,
by = c("array", "height")) %>%
mutate(ttlcost = capex*dc_kw,
anncost = ttlcost*(0.05*(1 + 0.05)^25)/((1 + 0.05)^25 - 1),
moncost = ttlcost*((0.05/12)*
(1 + (0.05/12))^(25*12))/
((1 + (0.05/12))^(25*12) - 1))
dim(energy_cost)
head(energy_cost)
tail(energy_cost)
# #| echo: TRUE
rm(list = ls()) # Clean the environment.
options(
warn=0, # Warnings. options(warn=-1) / options(warn=0)
scipen=999 # No scientific notations.
)
path_mac = "/Users/bmishra/Library/CloudStorage/OneDrive-AuburnUniversity/Collaboration/Ngbede M/Choice-paper"
path_office = "Users\\bzm0094\\OneDrive - Auburn University\\Collaboration\\Ngbede M\\Choice-paper"
ifelse(Sys.info()[6] == "bmishra",
setwd(path_mac),
setwd(path_office))
library(tidyverse, warn.conflicts = FALSE, quietly = TRUE)
library(psych, warn.conflicts = FALSE, quietly = TRUE)
library(likert,  warn.conflicts = FALSE, quietly = TRUE) # Likert Items
library(mice,  warn.conflicts = FALSE, quietly = TRUE)
library(openxlsx2, warn.conflicts = FALSE, quietly = TRUE)
library(ggpubr, warn.conflicts = FALSE, quietly = TRUE) # Scatter plot
library(gmodels,  warn.conflicts = FALSE, quietly = TRUE) # Crosstab
library(reshape2, warn.conflicts = FALSE, quietly = TRUE) # Reshape data
library(pacman,  warn.conflicts = FALSE, quietly = TRUE) # Package Management
library(progress, warn.conflicts = FALSE, quietly = TRUE) #progress bar
library(arrow, warn.conflicts = FALSE, quietly = TRUE) #progress bar
pacman::p_loaded()
####### Progress Bar #####
pb = progress_bar$new(
format = "Processing data at :rate. Processed :bytes in :elapsed.",
clear = TRUE,
total = NA,
width = 80)
f = function() {
for (i in 1:100) {
pb$tick(sample(1:100 * 1000, 1))
Sys.sleep(2/100)
}
pb$tick(1e7)
#invisible()
}
####### Plotting Data: #####
# Map Theme:
plottheme <- ggplot() +
theme_void() +
# Mapping theme:
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
plot.margin = margin(t = 0,
r = 0,
b = 0,
l = 0,
unit = "cm"),
plot.title = element_text(hjust = 0.5),
plot.background = element_rect(fill = "white",
color = "black",
linewidth = 0),
panel.background = element_rect(fill = "white",
color = "black",
linewidth = 0),
panel.grid.major.x = element_line(color = "lightgrey",
linetype = 2,
linewidth = 0),
panel.grid.minor.x = element_line(color = "lightgrey",
linetype = 2,
linewidth = 0),
panel.grid.major.y = element_line(color = "grey",
linetype = 2,
linewidth = 0),
panel.grid.minor.y = element_line(color = "grey",
linetype = 2,
linewidth = 0),
axis.line.x.top = element_line(color = "white",
linetype = 2,
linewidth = 0),
axis.line.y.right = element_line(color = "white",
linetype = 2,
linewidth = 0),
axis.line.x.bottom = element_line(color = "black",
linetype = 1,
linewidth = 0),
axis.line.y.left = element_line(color = "black",
linetype = 1,
linewidth = 0),
# Text formatting:
text = element_text(family = "serif", # font
size = 12, # font size
colour = "black"# font color
),
legend.position = c(0.95, -0.05),
legend.key = element_rect(color = "black",
fill = NA,
linewidth = 0.05,
linetype = 1),
legend.justification = "right",
legend.direction = "horizontal")
tomato <- read_xlsx("Parameters.xlsx",
sheet = "Tomato",
start_row = 2,
start_col = 9,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
dim(tomato)
head(tomato)
tail(tomato)
strawberry <- read_xlsx("Parameters.xlsx",
sheet = "Strawberry",
start_row = 2,
start_col = 7,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
dim(strawberry)
head(strawberry)
tail(strawberry)
squash <- read_xlsx("Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 8,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
dim(squash)
head(squash)
tail(squash)
elec_price <- read_xlsx("Parameters.xlsx",
sheet = "Electricity Price") %>%
rename(epr_kwh = `Electricity Price ($/kWh)`)
dim(elec_price)
elec_price
pvsc <- wb_read(file = "Parameters.xlsx",
sheet = "PV system Cost (NREL)",
rows = c(1:109),
cols = c(1:5),
col_names = TRUE) %>%
rename(avtyps = `AV Types`,
item = Item,
cost = `Cost ($/W)`,
height = `Panel Height (ft.)`,
tcost = `Total Cost ($/W)`)
dim(pvsc)
head(pvsc)
tail(pvsc)
capex <- read.table(file = "CAPEX.txt",
header = TRUE,
sep = "\t") %>%
rename(capex = cost,
height = pheight,
array = tracker)
dim(capex)
capex
plottheme %>% ggplot(data = capex,
mapping = (aes(
x = height,
y = capex,
color = array,
group = array))) +
geom_point() +
geom_line() +
# geom_text(aes(label = "Tracker"),
#           nudge_x = 0.05,
#           nudge_y = 0.05,
#           size = 6) +
labs(
title = "CAPEX Cost by Solar Panel Height",
x = "Panel Height (ft.)",
y = "CAPEX Cost ($/W)",
color = "Array"
) +
scale_x_continuous(limits = c(4.5, 8.5)) +
scale_y_continuous(limits = c(1.5, 2.5)) +
guides(color = guide_legend(reverse = TRUE))
panconf <- wb_read(file = "Parameters.xlsx",
sheet = "Panel Spacing",
start_row = 2,
start_col = 1,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE)
# rename(avtyps = `AV Types`,
#        item = Item,
#        cost = `Cost ($/W)`,
#        height = `Panel Height (ft.)`,
#        tcost = `Total Cost ($/W)`)
dim(panconf)
head(panconf)
tail(panconf)
energy_output <- read_xlsx("Parameters.xlsx",
sheet = "Energy Output",
start_row = 1,
start_col = 1,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(sprop = `Solar Proportion`,
panels = `Total Panels`,
datalot = DataLot,
al_regs = `Region of AL`,
zips = ZIPCODE,
array = `Array Type`,
dc_kw = `DC System Size (kW)`,
energy = `Energy (kWh/Year)`) %>%
mutate(dc_kw = round(dc_kw, 2),
array = case_when(
array == "1AxisRot" ~ "Tracking",
array == "FixedOpen" ~ "Fixed",
TRUE ~ array))
dim(energy_output)
head(energy_output)
tail(energy_output)
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
ggplot(data = energy_output,
mapping = aes(x = al_regs,
y = energy,
#fill = energy,
color = factor(panels),
group = factor(panels))) +
geom_line()+
geom_point() +
facet_grid(datalot~array) +
scale_x_discrete(limits = lox,
labels = c("North", "Center", "B Belt", "South")) +
guides(color = guide_legend(ncol = 2, reverse = TRUE))
lox <- c("Northern", "Central", "Black Belt", "Southern")
ggplot(data = energy_output,
mapping = aes(x = al_regs,
y = energy,
#fill = energy,
color = factor(dc_kw),
group = factor(dc_kw))) +
geom_line()+
geom_point() +
facet_grid(datalot~array) +
scale_x_discrete(limits = lox,
labels = c("North", "Center", "B Belt", "South")) +
guides(color = guide_legend(ncol =2, reverse = TRUE))
# Convert to data frames if they are not already
matrix1 <- energy_output  %>%
group_by(sprop, al_regs, array, dc_kw, panels) %>%
#filter(datalot == 2) %>%
# Compute mean of datalot 1 and datalot 2:
summarise(
energy = mean(energy),
.groups = 'drop'
) # dimension of matrix is 168*6
matrix2 <- elec_price # dimension of matrix is 11*1
# Initialize the result data frame
# energy_revenue <- data.frame(matrix(nrow = 1848, ncol = 9))
energy_revenue <- data.frame(
matrix(nrow = nrow(matrix2)*nrow(matrix1),
ncol = ncol(matrix2)+ncol(matrix1)+1))
# Variable to keep track of the row index in the result matrix
row_index <- 1
# Loop through each value of the second matrix
for (i in 1:nrow(matrix2)) {
# Loop through each value of the second matrix
for (j in 1:nrow(matrix1)) {
# First matrix, second matrix, combined two matrices.
new_row <- c(matrix1[j, ],
matrix2[i, ],
matrix1$energy[j] * matrix2$epr_kwh[i])
# Assign the new row to the result matrix
energy_revenue[row_index, ] <- new_row
# Increment the row index
row_index <- row_index + 1
}
# Name the columns
colnames(energy_revenue) <- c(colnames(matrix1), "elcprc", "elcrev")
# Display the result
dim(energy_revenue)
head(energy_revenue); tail(energy_revenue)
# Check for any NAs in the result
if(any(is.na(energy_revenue))) {
na_indices <- which(is.na(energy_revenue), arr.ind = TRUE)
print(paste("NAs found at rows:", unique(na_indices[, 1])))
} else {
print("No NAs found in the result data frame.")
}
## | results='hide'
# Sample data
set.seed(123)
matrix1 <- energy_output # dimension of matrix is 176*7
matrix2 <- elec_price # dimension of matrix is 11*1
# Initializing the result matrix
result_matrix <- data.frame(matrix(ncol = nrow(matrix2),
nrow = 0))
colnames(result_matrix) <- c(colnames(matrix1),  "elcrev", "elcprc")
# Loop to multiply first and second matrices
for (i in 1:nrow(matrix2)) {
temp_matrix <- matrix1
temp_matrix$E_Prc <- matrix2[i, ]
temp_matrix$E_Rev <- matrix1$energy[j] * matrix2$epr_kwh[i]
result_matrix <- rbind(result_matrix, temp_matrix)
}
# Display the resulting matrix
dim(result_matrix)
head(result_matrix)
tail(result_matrix)
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
for (i in unique(energy_revenue$elcprc)) {
a = ggplot(data = (energy_revenue %>%
filter(elcprc == i)),
mapping = aes(x =al_regs,
y = elcrev,
#fill = energy,
color = factor(panels),
group = factor(panels)))+
geom_line()+
geom_point()+
facet_grid(.~array) +
scale_x_discrete(limits = lox,
labels = c("North", "Center", "B Belt", "South")) +
guides(color = guide_legend(ncol =2, reverse = TRUE))
cat("Electricity Price = ", i)
print(a)
}
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
for (i in unique(energy_revenue$elcprc)) {
a = ggplot(data = (energy_revenue %>%
filter(elcprc == i)),
mapping = aes(x =al_regs,
y = elcrev,
#fill = energy,
color = factor(sprop),
group = factor(sprop)))+
geom_line()+
geom_point()+
facet_grid(.~array) +
scale_x_discrete(limits = lox,
labels = c("North", "Center", "B Belt", "South")) +
guides(color = guide_legend(ncol = 2, reverse = TRUE))
cat("Electricity Price = ", i)
print(a)
}
path_mac = "/Users/bmishra/Library/CloudStorage/OneDrive-AuburnUniversity/Collaboration/Ngbede M/Choice-paper"
path_office = "Users\\bzm0094\\OneDrive - Auburn University\\Collaboration\\Ngbede M\\Choice-paper"
ifelse(Sys.info()[6] == "bmishra",
setwd(path_mac),
setwd(path_office))
# #| echo: TRUE
rm(list = ls()) # Clean the environment.
options(
warn=0, # Warnings. options(warn=-1) / options(warn=0)
scipen=999 # No scientific notations.
)
path_mac = "/Users/bmishra/Library/CloudStorage/OneDrive-AuburnUniversity/Collaboration/Ngbede M/Choice-paper"
path_office = "Users\\bzm0094\\OneDrive - Auburn University\\Collaboration\\Ngbede M\\Choice-paper"
ifelse(Sys.info()[6] == "bmishra",
setwd(path_mac),
setwd(path_office))
library(tidyverse, warn.conflicts = FALSE, quietly = TRUE)
library(psych, warn.conflicts = FALSE, quietly = TRUE)
library(likert,  warn.conflicts = FALSE, quietly = TRUE) # Likert Items
library(mice,  warn.conflicts = FALSE, quietly = TRUE)
library(openxlsx2, warn.conflicts = FALSE, quietly = TRUE)
library(ggpubr, warn.conflicts = FALSE, quietly = TRUE) # Scatter plot
library(gmodels,  warn.conflicts = FALSE, quietly = TRUE) # Crosstab
library(reshape2, warn.conflicts = FALSE, quietly = TRUE) # Reshape data
library(pacman,  warn.conflicts = FALSE, quietly = TRUE) # Package Management
library(progress, warn.conflicts = FALSE, quietly = TRUE) #progress bar
library(arrow, warn.conflicts = FALSE, quietly = TRUE) #progress bar
pacman::p_loaded()
####### Progress Bar #####
pb = progress_bar$new(
format = "Processing data at :rate. Processed :bytes in :elapsed.",
clear = TRUE,
total = NA,
width = 80)
f = function() {
for (i in 1:100) {
pb$tick(sample(1:100 * 1000, 1))
Sys.sleep(2/100)
}
pb$tick(1e7)
#invisible()
}
# #| echo: TRUE
rm(list = ls()) # Clean the environment.
options(
warn=0, # Warnings. options(warn=-1) / options(warn=0)
scipen=999 # No scientific notations.
)
path_mac = "/Users/bmishra/Library/CloudStorage/OneDrive-AuburnUniversity/Collaboration/Ngbede M/Choice-paper"
path_office = "Users\\bzm0094\\OneDrive - Auburn University\\Collaboration\\Ngbede M\\Choice-paper"
ifelse(Sys.info()[6] == "bmishra",
setwd(path_mac),
setwd(path_office))
library(tidyverse, warn.conflicts = FALSE, quietly = TRUE)
library(psych, warn.conflicts = FALSE, quietly = TRUE)
library(likert,  warn.conflicts = FALSE, quietly = TRUE) # Likert Items
library(mice,  warn.conflicts = FALSE, quietly = TRUE)
library(openxlsx2, warn.conflicts = FALSE, quietly = TRUE)
library(ggpubr, warn.conflicts = FALSE, quietly = TRUE) # Scatter plot
library(gmodels,  warn.conflicts = FALSE, quietly = TRUE) # Crosstab
library(reshape2, warn.conflicts = FALSE, quietly = TRUE) # Reshape data
library(pacman,  warn.conflicts = FALSE, quietly = TRUE) # Package Management
library(progress, warn.conflicts = FALSE, quietly = TRUE) #progress bar
library(arrow, warn.conflicts = FALSE, quietly = TRUE) #progress bar
pacman::p_loaded()
####### Progress Bar #####
pb = progress_bar$new(
format = "Processing data at :rate. Processed :bytes in :elapsed.",
clear = TRUE,
total = NA,
width = 80)
f = function() {
for (i in 1:100) {
pb$tick(sample(1:100 * 1000, 1))
Sys.sleep(2/100)
}
pb$tick(1e7)
#invisible()
}
####### Plotting Data: #####
# Map Theme:
plottheme <- ggplot() +
theme_void() +
# Mapping theme:
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
plot.margin = margin(t = 0,
r = 0,
b = 0,
l = 0,
unit = "cm"),
plot.title = element_text(hjust = 0.5),
plot.background = element_rect(fill = "white",
color = "black",
linewidth = 0),
panel.background = element_rect(fill = "white",
color = "black",
linewidth = 0),
panel.grid.major.x = element_line(color = "lightgrey",
linetype = 2,
linewidth = 0),
panel.grid.minor.x = element_line(color = "lightgrey",
linetype = 2,
linewidth = 0),
panel.grid.major.y = element_line(color = "grey",
linetype = 2,
linewidth = 0),
panel.grid.minor.y = element_line(color = "grey",
linetype = 2,
linewidth = 0),
axis.line.x.top = element_line(color = "white",
linetype = 2,
linewidth = 0),
axis.line.y.right = element_line(color = "white",
linetype = 2,
linewidth = 0),
axis.line.x.bottom = element_line(color = "black",
linetype = 1,
linewidth = 0),
axis.line.y.left = element_line(color = "black",
linetype = 1,
linewidth = 0),
# Text formatting:
text = element_text(family = "serif", # font
size = 12, # font size
colour = "black"# font color
),
legend.position = c(0.95, -0.05),
legend.key = element_rect(color = "black",
fill = NA,
linewidth = 0.05,
linetype = 1),
legend.justification = "right",
legend.direction = "horizontal")
tav_profit <- read_feather(file = "tav_profit.feather")
dim(tav_profit)
str(tav_profit)
stav_profit <- read_feather(file = "stav_profit.feather")
stav_profit <- read_feather(file = "sbav_profit.feather")
dim(sbav_profit)
sbav_profit <- read_feather(file = "sbav_profit.feather")
dim(sbav_profit)
str(sbav_profit)
sqav_profit <- read_feather(file = "sqav_profit.feather")
dim(sqav_profit)
str(sqav_profit)
View(tav_profit)
