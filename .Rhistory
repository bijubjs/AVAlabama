colnames(result_matrix))] <- round(
row_data$yield, 2)
}
ct_sbav_be_yld <- as.data.frame(result_matrix) # Table in Excel.
write.csv(as.data.frame(ct_sbav_be_yld),
row.names = TRUE,
file = "Results/ct_sbav_be_yld.csv")
dim(ct_sbav_be_yld)
colorcount = length(unique(as.vector(as.matrix(ct_sbav_be_yld[-1]))))
colorcount
heatmap_plot <- pheatmap((ct_sbav_be_yld),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
color = colorRampPalette(c("red",
"yellow",
"green"))(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
number_format = "%.2f"
)
ggsave(heatmap_plot,
height = 8,
width = 12,
units = "in",
file = paste0("Plots/gp_sbav_be_yld", ".png"))
rm(heatmap_plot); rm(colorcount)
combinations <- expand.grid(
sprop = c(0, 0.25, 0.50, 0.75, 1.00), # Solar proportion
price = c(3, 6, 9), # Strawberry price
elcprc = c(0.03, 0.04, 0.05) #Electricity price
)
# Iterate over the combinations and create the plots
for (combo in seq_len(nrow(combinations))) {
filtered_data <- sbav_profit %>%
filter(
sprop == combinations$sprop[combo],
price == combinations$price[combo],
elcprc == combinations$elcprc[combo]
)
# If by yield, put yield below in color and group.
sbav_yv_plot <- ggplot(data = filtered_data,
mapping = aes(x = al_regs,
y = sbav_profit,
color = factor(yield),
group = factor(yield))) +
geom_line() +
geom_point() +
facet_grid(height ~ array,
labeller = as_labeller(
c(
"4.6" = "4.6 ft. Height",
"6.4" = "6.4 ft. Height",
"8.2" = "8.2 ft. Height",
Tracking = "Single Axis Rotation",
Fixed = "Fixed Open Rack"
))) +
guides(color = guide_legend(ncol = 1,
reverse = TRUE)) +
scale_x_discrete(limits = c("Northern", "Central",
"Black Belt", "Southern"),
labels = c("North", "Center",
"B Belt", "South")) +
guides(color = guide_legend(ncol = 2,
reverse = TRUE)) +
labs(x = "Regions of Alabama",
y = "Profit ($) from Strawberry Agrivoltaic System",
color = "Strawberry Yield \n (25 Lb Buckets)",
title = (list(combinations[combo,]))
) +
theme(strip.background = element_blank())
# Add horizontal line at y = 0 if y has both positive and negative values
if (min(filtered_data$sbav_profit) < 0 &
max(filtered_data$sbav_profit) > 0) {
sbav_yv_plot <- sbav_yv_plot +
geom_hline(yintercept = 0,
linewidth = 0.30,
linetype = "dashed",
color = "black")
}
print(combinations[combo,])
print(sbav_yv_plot)
ggsave(file = paste0("Plots/sbav_yv_", combo, ".png"))
#break
}
# Define the values for each variable
sprop <- c(0, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50,
0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00) # Land Proportion
array <- c("Fixed", "Tracking")
height <- c(4.6, 6.4, 8.2)
yldvar <- c(0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 1.00,
1.10, 1.20, 1.30, 1.40, 1.50, 1.60, 1.70, 1.80, 1.90, 2.00)
al_regs <- c("Northern", "Central", "Black Belt", "Southern")
price <- c(11, 12, 13, 14, 15, 16, 17)
elcprc <- c(0.02, 0.03, 0.04)
# Define the required columns
required_columns <- c("sprop", "array", "height", "al_regs",
"yldvar", "price", "elcprc")
# Check if the columns exist in tav_profit
missing_columns <- setdiff(required_columns,
names(sqav_profit))
if (length(missing_columns) > 0) {
stop("Missing columns in sqav_profit: ",
paste(missing_columns,
collapse = ", "))
}
# Generate column names using expand.grid without array
col_names <- apply(expand.grid(height, sprop),
1, function(x)
paste0(x[2], "%_",
x[1]))
# Generate row names using expand.grid with array included
row_names <- apply(expand.grid(elcprc, price, yldvar, al_regs, array),
1, function(x) paste0(x[4], "_",
x[3], "_",
x[2], "_",
x[1], "_",
x[5]))
# Create an empty matrix to store the results
result_matrix <- matrix(NA,
nrow = length(row_names),
ncol = length(col_names))
colnames(result_matrix) <- col_names
rownames(result_matrix) <- row_names
# Create a data frame with all combinations of parameters
param_combinations <- expand.grid(elcprc = elcprc,
price = price,
yldvar = yldvar,
al_regs = al_regs,
array = array,
height = height,
sprop = sprop)
# Merge with tav_profit to get av_profit values for each combination
merged_data <- merge(param_combinations,
sqav_profit,
by = c("sprop", "array", "height",
"al_regs", "yldvar", "price",
"elcprc"),
all.x = TRUE)
# Reshape merged_data to fill result_matrix with adjusted column and row names
merged_data$col_name <- apply(merged_data[, c("sprop", "height")],
1, function(x) paste0(x[1], "%_",
x[2]))
merged_data$row_name <- apply(merged_data[, c("al_regs", "yldvar", "price",
"elcprc", "array")], 1,
function(x) paste0(x[1], "_",
x[2], "_",
x[3], "_",
x[4], "_",
x[5]))
# Fill the matrix with av_profit values
for (i in seq_len(nrow(result_matrix))) {
row_condition <- rownames(result_matrix)[i]
row_data <- merged_data[merged_data$row_name == row_condition, ]
if (nrow(row_data) > 0) {
result_matrix[i, match(
row_data$col_name,
colnames(result_matrix))] <- round(row_data$sqav_profit, 2)
}
# Display the result matrix
ct_sqav_pft64815 <- as.data.frame(result_matrix) # Table in Excel.
rm(result_matrix)
#Shape crosstab.
# Define the values for each variable
sprop <- c(0, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50,
0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00) # Land Proportion
array <- c("Fixed", "Tracking")
height <- c(4.6, 6.4, 8.2)
yldvar <- c(0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 1.00,
1.10, 1.20, 1.30, 1.40, 1.50, 1.60, 1.70, 1.80, 1.90, 2.00)
al_regs <- c("Northern", "Central", "Black Belt", "Southern")
price <- c(11, 12, 13, 14, 15, 16, 17)
elcprc <- c(0.02, 0.03, 0.04)
# Define the required columns
required_columns <- c("sprop", "array", "height",
"al_regs", "yldvar", "price", "elcprc")
# Check if the columns exist in sqav_profit
missing_columns <- setdiff(required_columns,
names(sqav_profit))
if (length(missing_columns) > 0) {
stop("Missing columns in sqav_profit: ",
paste(missing_columns, collapse = ", "))
}
# Generate column names using reversed order of expand.grid
col_names <- apply(expand.grid(height, array, sprop), 1,
function(x) paste0(x[3],
x[2],
x[1]))
# Generate row names using reversed order of expand.grid
row_names <- apply(expand.grid(elcprc,
price,
yldvar,
al_regs), 1,
function(x) paste0(x, collapse = ""))
# Create an empty matrix to store the results
result_matrix <- matrix(NA, nrow = length(row_names),
ncol = length(col_names))
colnames(result_matrix) <- col_names
rownames(result_matrix) <- row_names
# Create a data frame with
# all combinations of parameters in reversed order
param_combinations <- expand.grid(elcprc = elcprc,
price = price,
yldvar = yldvar,
al_regs = al_regs,
height = height,
array = array,
sprop = sprop)
# Merge with tav_profit to get sqav_profit values for each combination
merged_data <- merge(param_combinations,
sqav_profit,
by = required_columns,
all.x = TRUE)
# Reshape merged_data to fill result_matrix with
# reversed column and row names
merged_data$col_name <- apply(
merged_data[, c("sprop", "array", "height")], 1,
function(x) paste0(x[1],
x[2],
x[3]))
merged_data$row_name <- apply(
merged_data[, c("al_regs", "yldvar", "price", "elcprc")], 1,
function(x) paste0(x[4],
x[3],
x[2],
x[1]))
# Fill the matrix with sqav_profit values
for (i in seq_len(nrow(result_matrix))) {
row_condition <- rownames(result_matrix)[i]
row_data <- merged_data[
merged_data$row_name == row_condition, ]
if (nrow(row_data) > 0) {
result_matrix[i,
match(row_data$col_name,
colnames(result_matrix))] <- round(
row_data$sqav_profit, 2)
}
ct_sqav_pft <- as.data.frame(result_matrix) # Table in Excel.
rm(result_matrix); rm(sprop); rm(array); rm(height);
rm(elcprc); rm(price); rm(yldvar); rm(al_regs)
write.csv(as.data.frame(ct_sqav_pft),
row.names = TRUE,
file = "Results/ct_sqav_pft.csv")
dim(ct_sqav_pft)
colorcount = length(unique(as.vector(as.matrix(ct_sqav_pft[-1]))))
colorcount
heatmap_plot <- pheatmap(t(ct_sqav_pft),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
color = colorRampPalette(c("red",
"yellow",
"green"))(colorcount),
#cutree_rows = 5,
#cutree_cols = 4,
#cellheight = 3,
#cellwidth = 3,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = FALSE,
show_colnames = FALSE,
display_numbers = FALSE,
number_format = "%.2f")
ggsave(heatmap_plot,
height = 8,
width = 12,
units = "in",
file = paste0("Plots/gp_sqav_pft", ".png"))
rm(heatmap_plot)
rm(colorcount)
# Define the values for each variable
sprop <- c(0, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50,
0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00) # Land Proportion
array <- c("Fixed", "Tracking")
height <- c(4.6, 6.4, 8.2)
yldvar <- c(0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 1.00,
1.10, 1.20, 1.30, 1.40, 1.50, 1.60, 1.70, 1.80, 1.90, 2.00)
al_regs <- c("Northern", "Central", "Black Belt", "Southern")
price <- c(11, 12, 13, 14, 15, 16, 17)
elcprc <- c(0.02, 0.03, 0.04)
# Define the required columns
required_columns <- c("sprop", "array", "height",
"al_regs", "yldvar", "price", "elcprc")
# Check if the columns exist in sqav_profit
missing_columns <- setdiff(required_columns,
names(sqav_profit))
if (length(missing_columns) > 0) {
stop("Missing columns in sqav_profit: ",
paste(missing_columns, collapse = ", "))
}
# Generate column names using reversed order of expand.grid
col_names <- apply(expand.grid(height, array, sprop), 1,
function(x) paste0(x[3],
x[2],
x[1]))
# Generate row names using reversed order of expand.grid
row_names <- apply(expand.grid(elcprc,
price,
yldvar,
al_regs), 1,
function(x) paste0(x, collapse = ""))
# Create an empty matrix to store the results
result_matrix <- matrix(NA, nrow = length(row_names),
ncol = length(col_names))
colnames(result_matrix) <- col_names
rownames(result_matrix) <- row_names
# Create a data frame with
# all combinations of parameters in reversed order
param_combinations <- expand.grid(elcprc = elcprc,
price = price,
yldvar = yldvar,
al_regs = al_regs,
height = height,
array = array,
sprop = sprop)
# Merge with tav_profit to get sqav_profit values for each combination
merged_data <- merge(param_combinations,
sqav_profit,
by = required_columns,
all.x = TRUE)
# Reshape merged_data to fill result_matrix with
# reversed column and row names
merged_data$col_name <- apply(
merged_data[, c("sprop", "array", "height")], 1,
function(x) paste0(x[1],
x[2],
x[3]))
merged_data$row_name <- apply(
merged_data[, c("al_regs", "yldvar", "price", "elcprc")], 1,
function(x) paste0(x[4],
x[3],
x[2],
x[1]))
# Fill the matrix with sqav_profit values
for (i in seq_len(nrow(result_matrix))) {
row_condition <- rownames(result_matrix)[i]
row_data <- merged_data[
merged_data$row_name == row_condition, ]
if (nrow(row_data) > 0) {
result_matrix[i,
match(row_data$col_name,
colnames(result_matrix))] <- round(
row_data$sqavp_wocp, 2)
}
ct_sqavp_wocp <- as.data.frame(result_matrix) #Table in Excel.
rm(result_matrix)
write.csv(as.data.frame(ct_sqavp_wocp),
row.names = TRUE,
file = "Results/ct_sqavp_wocp.csv")
dim(ct_sqavp_wocp)
colorcount = length(unique(as.vector(as.matrix(ct_sqavp_wocp[-1]))))
colorcount
heatmap_plot <- pheatmap(t(ct_sqavp_wocp),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
color = colorRampPalette(c("red",
"yellow",
"green"))(colorcount),
#cutree_rows = 5,
#cutree_cols = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = FALSE,
show_colnames = FALSE,
display_numbers = FALSE,
number_format = "%.2f",
#cellheight = 3,
#cellwidth = 3
)
ggsave(heatmap_plot,
height = 8,
width = 12,
units = "in",
file = paste0("Plots/gp_sqavp_wocp", ".png"))
rm(heatmap_plot)
rm(colorcount)
# Define the values for each variable
sprop <- c(0, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50,
0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00)
array <- c("Fixed", "Tracking") # Solar Array
height <- c(4.6, 6.4, 8.2) # Panel height
al_regs <- c("Northern", "Central", "Black Belt", "Southern")
price <- c(11, 12, 13, 14, 15, 16, 17)
elcprc <- c(0.02, 0.03, 0.04) # Electricity Price
yldvar <- c(0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 1.00,
1.10, 1.20, 1.30, 1.40, 1.50, 1.60, 1.70, 1.80, 1.90, 2.00)
# Define the required columns
required_columns <- c("sprop", "array", "height",
"al_regs", "price", "elcprc")
# Check if the columns exist in tav_profit
missing_columns <- setdiff(required_columns,
names(sqav_be_yld))
if (length(missing_columns) > 0) {
stop("Missing columns in sqavp_be_yld: ",
paste(missing_columns, collapse = ", "))
}
# Generate column names using reversed order of expand.grid
col_names <- apply(expand.grid(height, array, sprop), 1,
function(x) paste0(x[3], x[2], x[1]))
# Generate row names using reversed order of expand.grid
row_names <- apply(expand.grid(elcprc,
price,
al_regs), 1,
function(x) paste0(x, collapse = ""))
# Create an empty matrix to store the results
result_matrix <- matrix(NA, nrow = length(row_names),
ncol = length(col_names))
colnames(result_matrix) <- col_names
rownames(result_matrix) <- row_names
# Create a data frame with
# all combinations of parameters in reversed order
param_combinations <- expand.grid(elcprc = elcprc,
price = price,
al_regs = al_regs,
height = height,
array = array,
sprop = sprop)
# Merge with tavp_be_yld to get sbav_be_yld values for each combination
merged_data <- merge(param_combinations,
sqav_be_yld,
by = required_columns,
all.x = TRUE)
# Reshape merged_data to fill result_matrix with
# reversed column and row names
merged_data$col_name <- apply(
merged_data[, c("sprop", "array", "height")], 1,
function(x) paste0(x[1], x[2], x[3]))
merged_data$row_name <- apply(
merged_data[, c("al_regs", "price", "elcprc")], 1,
function(x) paste0(x[3],
x[2],
x[1]))
# Fill the matrix with sbav_profit values
for (i in seq_len(nrow(result_matrix))) {
row_condition <- rownames(result_matrix)[i]
row_data <- merged_data[
merged_data$row_name == row_condition, ]
if (nrow(row_data) > 0) {
result_matrix[i,
match(row_data$col_name,
colnames(result_matrix))] <- round(
row_data$yield, 2)
}
ct_sqav_be_yld <- as.data.frame(result_matrix) # Table in Excel.
write.csv(as.data.frame(ct_sqav_be_yld),
row.names = TRUE,
file = "Results/ct_sqav_be_yld.csv")
dim(ct_sqav_be_yld)
rm(result_matrix)
colorcount = length(unique(as.vector(as.matrix(ct_sqav_be_yld[-1]))))
colorcount
heatmap_plot <- pheatmap((ct_sqavp_be_yld),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
color = colorRampPalette(c("red",
"yellow",
"green"))(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
number_format = "%.2f"
)
colorcount = length(unique(as.vector(as.matrix(ct_sqav_be_yld[-1]))))
colorcount
heatmap_plot <- pheatmap((ct_sqav_be_yld),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
color = colorRampPalette(c("red",
"yellow",
"green"))(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
number_format = "%.2f"
)
ggsave(heatmap_plot,
height = 8,
width = 12,
units = "in",
file = paste0("Plots/gp_sqav_be_yld", ".png"))
rm(heatmap_plot)
rm(colorcount)
