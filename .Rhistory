labels = c("North", "Center",
"B Belt", "South")) +
guides(color = guide_legend(ncol = 2,
reverse = TRUE))
cat("Electricity Price = ", i)
print(b)
}
tomato_profit = tomato %>%
select(yldvar, yield,
rolac17, rolac18, rolac19, rolac20,
rolac21, rolac22, rolac23)
dim(tomato_profit)
tomato_profit
# Assign column names for clarity
colnames(tomato_profit) <- c("yldvar", "yield",
"rolac17", "rolac18", "rolac19",
"rolac20", "rolac21", "rolac22",
"rolac23")
# Reshape the data frame from wide to long format
tomato_long <- melt(tomato_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("rolac17", "rolac18", "rolac19",
"rolac20", "rolac21", "rolac22",
"rolac23"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
tomato_long$price <- as.numeric(gsub("rolac", "", tomato_long$price))
str(tomato_long)
head(tomato_long); tail(tomato_long)
ggplot(data = tomato_long,
mapping = aes(x = price,
y = profit,
color = factor(yldvar),
group = factor(yield))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
guides(color = guide_legend(ncol = 2,
reverse = TRUE))
ggplot(data = tomato_long,
mapping = aes(x = yield,
y = profit,
#fill = yield,
color = factor(price),
group = factor(price))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
# Vertical dashed line is 100% yield
geom_vline(xintercept = tomato_long$yield[11],
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
strawberry_profit = strawberry %>%
select(yldvar, yield,
rolac3, rolac4, rolac5, rolac6,
rolac7, rolac8, rolac9)
str(strawberry_profit)
strawberry_profit
# Assign column names for clarity
colnames(strawberry_profit) <- c("yldvar", "yield",
"rolac3", "rolac4", "rolac5",
"rolac6", "rolac7", "rolac8",
"rolac9")
# Reshape the data frame from wide to long format
stberry_long <- melt(strawberry_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("rolac3", "rolac4", "rolac5",
"rolac6", "rolac7", "rolac8",
"rolac9"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
stberry_long$price <- as.numeric(gsub("rolac", "", stberry_long$price))
str(stberry_long)
head(stberry_long); tail(stberry_long)
ggplot(data = stberry_long,
mapping = aes(x = price,
y = profit,
color = factor(yldvar),
group = factor(yield))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
guides(color = guide_legend(ncol = 2,
reverse = TRUE))
ggplot(data = stberry_long,
mapping = aes(x = yield,
y = profit,
color = factor(price),
group = factor(price))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
#Vertical dashed line is 100% yield
geom_vline(xintercept = stberry_long$yield[11],
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
squash_profit = squash %>%
select(yldvar, yield,
rolac11, rolac12, rolac13, rolac14,
rolac15, rolac16, rolac17)
dim(squash_profit)
squash_profit
# Assign column names for clarity
colnames(squash_profit) <- c("yldvar", "yield",
"rolac11", "rolac12", "rolac13",
"rolac14", "rolac15", "rolac16",
"rolac17")
# Reshape the data frame from wide to long format
squash_long <- melt(squash_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("yldvar", "yield",
"rolac11", "rolac12", "rolac13",
"rolac14", "rolac15", "rolac16",
"rolac17"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
squash_long$price <- as.numeric(gsub("rolac", "", squash_long$price))
str(squash_long)
head(squash_long); tail(squash_long)
# Calculate all combinations of rows from both matrices in a vectorized way
solar_expanded <- solar_profit[rep(1:nrow(solar_profit),
each = nrow(tomato_long)), ]
tomato_expanded <- tomato_long[rep(1:nrow(tomato_long),
times = nrow(solar_profit)), ]
# Calculate the new column for tav_profit directly
tav_profit_values <- solar_expanded$eannprof + tomato_expanded$profit
# Combine the matrices and the calculated tav_profit column
tav_profit <- cbind(solar_expanded,
tomato_expanded,
tav_profit = tav_profit_values)
# Convert to a data frame and ensure the correct format
tav_profit <- as.data.frame(tav_profit)
tav_profit <- data.frame(lapply(tav_profit, unlist))
str(tav_profit)
head(tav_profit); tail(tav_profit)
write_feather(tav_profit,
sink = "Data/tav_profit R50.feather",
version = 2,
chunk_size = 65536L,
compression = c("default"),
#compression = c("default", "lz4", "lz4_frame", "uncompressed", "zstd"),
compression_level = NULL
)
tictoc::tic("Using Dplyr:")
write_xlsx(x = tav_profit %>%
dplyr::sample_n(100),
file = "Results/TAV Profit Sample R50.xlsx",
as_table = TRUE)
tictoc::toc()
write_xlsx(x = tav_profit %>%
filter(sprop %in% c(0, 0.25, 0.50, 0.75, 1),
yldvar == 1,
price == 20,
elcprc == 0.04)%>%
dplyr::select(sprop, panels, height, array,
al_regs, yldvar, yield, price,
elcprc, tav_profit) %>%
mutate(al_regs1 = case_when(
al_regs == "Northern" ~ 1,
al_regs == "Central" ~ 2,
al_regs == "Black Belt" ~ 3,
al_regs == "Southern" ~ 4,
TRUE ~ NA_real_)),
file = "Results/Profit TAV WriteUp R50.xlsx",
as_table = TRUE)
# Generate all combinations of rows from both matrices in a vectorized way
solar_expanded <- solar_profit[rep(1:nrow(solar_profit),
each = nrow(stberry_long)), ]
stberry_expanded <- stberry_long[rep(1:nrow(stberry_long),
times = nrow(solar_profit)), ]
# Calculate the new column for sbav_profit directly
sbav_profit_values <- solar_expanded$eannprof + stberry_expanded$profit
# Combine the matrices and the calculated sbav_profit column
sbav_profit <- cbind(solar_expanded,
stberry_expanded,
sbav_profit = sbav_profit_values)
# Convert to a data frame and ensure the correct format
sbav_profit <- as.data.frame(sbav_profit)
sbav_profit <- data.frame(lapply(sbav_profit, unlist))
str(sbav_profit)
head(sbav_profit); tail(sbav_profit)
#write_csv(sbav_profit, "tav_profit.csv")
write_feather(sbav_profit,
sink = "Data/sbav_profit R50.feather",
version = 2,
chunk_size = 65536L,
compression = c("default"),
#compression = c("default", "lz4", "lz4_frame", "uncompressed", "zstd"),
compression_level = NULL
)
tictoc::tic("Using Base R Matrix:")
write_xlsx(x = sbav_profit[sample(nrow(sbav_profit), 100),],
file = "Results/SBAV Profit Sample R50.xlsx",
as_table = TRUE)
tictoc::toc()
write_xlsx(x = sbav_profit %>%
filter(sprop %in% c(0, 0.25, 0.50, 0.75, 1),
yldvar == 1,
price == 9,
elcprc == 0.04)%>%
dplyr::select(sprop, panels, height, array, al_regs,
#price, elcprc, yldvar, yield,
sbav_profit) %>%
mutate(al_regs1 = case_when(
al_regs == "Northern" ~ 1,
al_regs == "Central" ~ 2,
al_regs == "Black Belt" ~ 3,
al_regs == "Southern" ~ 4,
TRUE ~ NA_real_)),
file = "Results/Profit SBAV WriteUp R50.xlsx",
as_table = TRUE)
# Generate all combinations of rows from both matrices in a vectorized way
solar_expanded <- solar_profit[rep(1:nrow(solar_profit),
each = nrow(squash_long)), ]
squash_expanded <- squash_long[rep(1:nrow(squash_long),
times = nrow(solar_profit)), ]
# Calculate the new column for sbav_profit directly
sqav_profit_values <- solar_expanded$eannprof + squash_expanded$profit
# Combine the matrices and the calculated sbav_profit column
sqav_profit <- cbind(solar_expanded,
squash_expanded,
sqav_profit = sqav_profit_values)
# Convert to a data frame and ensure the correct format
sqav_profit <- as.data.frame(sqav_profit)
sqav_profit <- data.frame(lapply(sqav_profit, unlist))
write_feather(sqav_profit,
sink = "Data/sqav_profit R50.feather",
version = 2,
chunk_size = 65536L,
compression = c("default"),
compression_level = NULL
)
tictoc::tic("Using Base R Matrix:")
write_xlsx(x = sqav_profit[sample(nrow(sqav_profit), 100),],
file = "Results/SQAV Profit Sample R50.xlsx",
as_table = TRUE)
tictoc::toc()
write_xlsx(x = sqav_profit %>%
filter(sprop %in% c(0, 0.25, 0.50, 0.75, 1),
yldvar == 1,
price == 9,
elcprc == 0.04)%>%
dplyr::select(sprop, panels, height, array, al_regs,
#price, elcprc, yldvar, yield,
sqav_profit) %>%
mutate(al_regs1 = case_when(
al_regs == "Northern" ~ 1,
al_regs == "Central" ~ 2,
al_regs == "Black Belt" ~ 3,
al_regs == "Southern" ~ 4,
TRUE ~ NA_real_)),
file = "Results/Profit SQAV WriteUp R50.xlsx",
as_table = TRUE)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 8,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
str(squash)
head(squash); tail(squash)
squash_profit = squash %>%
select(yldvar, yield,
rolac11, rolac12, rolac13, rolac14,
rolac15, rolac16, rolac17)
# Assign column names for clarity
colnames(squash_profit) <- c("yldvar", "yield",
"rolac11", "rolac12", "rolac13",
"rolac14", "rolac15", "rolac16",
"rolac17")
# Reshape the data frame from wide to long format
squash_long <- melt(squash_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("yldvar", "yield",
"rolac11", "rolac12", "rolac13",
"rolac14", "rolac15", "rolac16",
"rolac17"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
squash_long$price <- as.numeric(gsub("rolac", "", squash_long$price))
squash_profit = squash %>%
select(yldvar, yield,
rolac11, rolac12, rolac13, rolac14,
rolac15, rolac16, rolac17)
# Assign column names for clarity
colnames(squash_profit) <- c("yldvar", "yield",
"rolac11", "rolac12", "rolac13",
"rolac14", "rolac15", "rolac16",
"rolac17")
# Reshape the data frame from wide to long format
squash_long <- reshape2::melt(squash_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("yldvar", "yield",
"rolac11", "rolac12", "rolac13",
"rolac14", "rolac15", "rolac16",
"rolac17"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
squash_long$price <- as.numeric(gsub("rolac", "", squash_long$price))
View(squash_long)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 8,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
str(squash)
head(squash); tail(squash)
squash_profit = squash %>%
select(yldvar, yield,
rolac11, rolac12, rolac13, rolac14,
rolac15, rolac16, rolac17)
# Assign column names for clarity
colnames(squash_profit) <- c("yldvar", "yield",
"rolac11", "rolac12", "rolac13",
"rolac14", "rolac15", "rolac16",
"rolac17")
# Reshape the data frame from wide to long format
squash_long <- reshape2::melt(squash_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("yldvar", "yield",
"rolac11", "rolac12", "rolac13",
"rolac14", "rolac15", "rolac16",
"rolac17"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
squash_long$price <- as.numeric(gsub("rolac", "", squash_long$price))
squash_profit = squash %>%
select(yldvar, yield,
rolac11, rolac12, rolac13, rolac14,
rolac15, rolac16, rolac17)
# Assign column names for clarity
colnames(squash_profit) <- c("yldvar", "yield",
"rolac11", "rolac12", "rolac13",
"rolac14", "rolac15", "rolac16",
"rolac17")
# Reshape the data frame from wide to long format
squash_long <- reshape2::melt(squash_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("yldvar", "yield",
"rolac11", "rolac12", "rolac13",
"rolac14", "rolac15", "rolac16",
"rolac17"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
squash_long$price <- as.numeric(gsub("rolac", "", squash_long$price))
View(squash_long)
View(tomato_long)
View(stberry_long)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 7,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "squash",
start_row = 2,
start_col = 7,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 7,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 7,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
tomato <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 9,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
str(tomato)
head(tomato); tail(tomato)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 9,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 7,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
View(squash)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 7,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 7,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 7,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
squash(names)
names(squash)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 7,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 7,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 7,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 7,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = "Yield Variation (%)")
squash <- read_xlsx("Data/Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 7,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
