rolac17, rolac18, rolac19, rolac20, rolac21, rolac22, rolac23)
dim(tomato_profit)
tomato_profit
# Assign column names for clarity
colnames(tomato_profit) <- c("yldvar", "yield",
"rolac17", "rolac18", "rolac19",
"rolac20", "rolac21", "rolac22",
"rolac23")
# Reshape the data frame from wide to long format
tomato_long <- melt(tomato_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("rolac17", "rolac18", "rolac19",
"rolac20", "rolac21", "rolac22",
"rolac23"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
tomato_long$price <- as.numeric(gsub("rolac", "", tomato_long$price))
# View the resulting data frame
dim(tomato_long)
head(tomato_long)
tail(tomato_long)
ggplot(data = tomato_long,
mapping = aes(x = price,
y = profit,
color = factor(yldvar),
group = factor(yield))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
ggplot(data = tomato_long,
mapping = aes(x = yield,
y = profit,
#fill = yield,
color = factor(price),
group = factor(price))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
# Vertical dashed line is 100% yield
geom_vline(xintercept = tomato_long$yield[11],
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
strawberry_profit = strawberry %>%
select(yldvar, yield,
rolac3, rolac4, rolac5, rolac6, rolac7, rolac8, rolac9)
dim(strawberry_profit)
strawberry_profit
# Assign column names for clarity
colnames(strawberry_profit) <- c("yldvar", "yield",
"rolac3", "rolac4", "rolac5",
"rolac6", "rolac7", "rolac8",
"rolac9")
# Reshape the data frame from wide to long format
stberry_long <- melt(strawberry_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("rolac3", "rolac4", "rolac5",
"rolac6", "rolac7", "rolac8",
"rolac9"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
stberry_long$price <- as.numeric(gsub("rolac", "", stberry_long$price))
# View the resulting data frame
dim(stberry_long)
head(stberry_long)
tail(stberry_long)
ggplot(data = stberry_long,
mapping = aes(x = price,
y = profit,
color = factor(yldvar),
group = factor(yield))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
ggplot(data = stberry_long,
mapping = aes(x = yield,
y = profit,
color = factor(price),
group = factor(price))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
#Vertical dashed line is 100% yield
geom_vline(xintercept = stberry_long$yield[11],
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
squash_profit = squash %>%
select(yldvar, yield,
rolac11, rolac12, rolac13, rolac14, rolac15, rolac16, rolac17)
squash_profit
# Assign column names for clarity
colnames(squash_profit) <- c("yldvar", "yield",
"rolac11", "rolac12", "rolac13",
"rolac14", "rolac15", "rolac16",
"rolac17")
# Reshape the data frame from wide to long format
squash_long <- melt(squash_profit,
id.vars = c("yldvar", "yield"),
measure.vars = c("rolac11", "rolac12", "rolac13",
"rolac14", "rolac15", "rolac16",
"rolac17"),
variable.name = "price",
value.name = "profit")
# Convert the 'Price' column to numeric by extracting the number
squash_long$price <- as.numeric(gsub("rolac", "", squash_long$price))
# View the resulting data frame
dim(squash_long)
head(squash_long)
tail(squash_long)
ggplot(data = squash_long,
mapping = aes(x = price,
y = profit,
color = factor(yldvar),
group = factor(yield))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
ggplot(data = squash_long,
mapping = aes(x = yield,
y = profit,
color = factor(price),
group = factor(price))) +
geom_line() +
geom_point() +
geom_hline(yintercept = 0,
linetype = "dashed",
color = "black") +
# Vertical dashed line is 100% yield
geom_vline(xintercept = squash_long$yield[11],
linetype = "dashed",
color = "black") +
guides(color = guide_legend(reverse = TRUE))
## | results='hide'
# Sample data
set.seed(123)
# Initialize the result data frame
#tomatoav_profit <- data.frame(matrix(nrow = 813120, ncol = 17))
tomatoAV_profit <- data.frame(
matrix(nrow = nrow(tomato_long)*nrow(solar_profit),
ncol = 18))
# Variable to keep track of the row index in the result matrix
row_index <- 1
# Loop through each value of the second matrix
for (i in 1:nrow(tomato_long)) {
f() #Progress bar.
# Loop through each value of the second matrix
for (j in 1:nrow(solar_profit)) {
# First matrix, second matrix, combined two matrices.
new_row <- c(solar_profit[j, ], tomato_long[i, ],
solar_profit[j, 13] + tomato_long[i, 4])
# Assign the new row to the result matrix
tomatoAV_profit[row_index, ] <- new_row
# Increment the row index
row_index <- row_index + 1
}
# Name the columns
colnames(tomatoAV_profit) <- c(colnames(solar_profit),
colnames(tomato_long),
"tav_prft")
# Display the result
dim(tomatoAV_profit)
head(tomatoAV_profit); tail(tomatoAV_profit)
# Assuming solar_profit and stberry_long are already defined and have the appropriate data
# Generate all combinations of row indices from both matrices
index_combinations <- expand.grid(1:nrow(solar_profit), 1:nrow(stberry_long))
# Define a function to process each combination of indices
process_combination <- function(index_pair) {
i <- index_pair[1]
j <- index_pair[2]
new_row <- c(solar_profit[i, ], stberry_long[j, ],
solar_profit[i, 13] + stberry_long[j, 4])
return(new_row)
}
# Apply the function to each combination of indices and combine the results into a matrix
stbryAV_profit <- do.call(rbind, lapply(1:nrow(index_combinations), function(k) {
process_combination(index_combinations[k, ])
}))
# #| echo: TRUE
rm(list = ls()) # Clean the environment.
options(
warn=0, # Warnings. options(warn=-1) / options(warn=0)
scipen=999 # No scientific notations.
)
path_mac = "/Users/bmishra/Library/CloudStorage/OneDrive-AuburnUniversity/Collaboration/Ngbede M/Choice-paper"
path_office = "Users\\bzm0094\\OneDrive - Auburn University\\Collaboration\\Ngbede M\\Choice-paper"
ifelse(Sys.info()[6] == "bmishra",
setwd(path_mac),
setwd(path_office))
library(tidyverse, warn.conflicts = FALSE, quietly = TRUE)
library(psych, warn.conflicts = FALSE, quietly = TRUE)
library(likert,  warn.conflicts = FALSE, quietly = TRUE) # Likert Items
library(mice,  warn.conflicts = FALSE, quietly = TRUE)
# #| echo: TRUE
rm(list = ls()) # Clean the environment.
options(
warn=0, # Warnings. options(warn=-1) / options(warn=0)
scipen=999 # No scientific notations.
)
path_mac = "/Users/bmishra/Library/CloudStorage/OneDrive-AuburnUniversity/Collaboration/Ngbede M/Choice-paper"
path_office = "Users\\bzm0094\\OneDrive - Auburn University\\Collaboration\\Ngbede M\\Choice-paper"
ifelse(Sys.info()[6] == "bmishra",
setwd(path_mac),
setwd(path_office))
library(tidyverse, warn.conflicts = FALSE, quietly = TRUE)
library(psych, warn.conflicts = FALSE, quietly = TRUE)
library(likert,  warn.conflicts = FALSE, quietly = TRUE) # Likert Items
library(mice,  warn.conflicts = FALSE, quietly = TRUE)
library(openxlsx2, warn.conflicts = FALSE, quietly = TRUE)
library(ggpubr, warn.conflicts = FALSE, quietly = TRUE) # Scatter plot
library(gmodels,  warn.conflicts = FALSE, quietly = TRUE) # Crosstab
library(reshape2, warn.conflicts = FALSE, quietly = TRUE) # Reshape data
library(pacman,  warn.conflicts = FALSE, quietly = TRUE) # Package Management
library(progress, warn.conflicts = FALSE, quietly = TRUE) #progress bar
pacman::p_loaded()
####### Progress Bar #####
pb = progress_bar$new(
format = "Processing data at :rate. Processed :bytes in :elapsed.",
clear = TRUE,
total = NA,
width = 80)
f = function() {
for (i in 1:100) {
pb$tick(sample(1:100 * 1000, 1))
Sys.sleep(2/100)
}
pb$tick(1e7)
#invisible()
}
####### Plotting Data: #####
# Map Theme:
plottheme <- ggplot() +
theme_void() +
# Mapping theme:
theme(axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.border = element_blank(),
plot.margin = margin(t = 0,
r = 0,
b = 0,
l = 0,
unit = "cm"),
plot.title = element_text(hjust = 0.5),
plot.background = element_rect(fill = "white",
color = "black",
linewidth = 0),
panel.background = element_rect(fill = "white",
color = "black",
linewidth = 0),
panel.grid.major.x = element_line(color = "lightgrey",
linetype = 2,
linewidth = 0),
panel.grid.minor.x = element_line(color = "lightgrey",
linetype = 2,
linewidth = 0),
panel.grid.major.y = element_line(color = "grey",
linetype = 2,
linewidth = 0),
panel.grid.minor.y = element_line(color = "grey",
linetype = 2,
linewidth = 0),
axis.line.x.top = element_line(color = "white",
linetype = 2,
linewidth = 0),
axis.line.y.right = element_line(color = "white",
linetype = 2,
linewidth = 0),
axis.line.x.bottom = element_line(color = "black",
linetype = 1,
linewidth = 0),
axis.line.y.left = element_line(color = "black",
linetype = 1,
linewidth = 0),
# Text formatting:
text = element_text(family = "serif", # font
size = 12, # font size
colour = "black"# font color
),
legend.position = c(0.95, -0.05),
legend.key = element_rect(color = "black",
fill = NA,
linewidth = 0.05,
linetype = 1),
legend.justification = "right",
legend.direction = "horizontal")
tomato <- read_xlsx("Parameters.xlsx",
sheet = "Tomato",
start_row = 2,
start_col = 9,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
dim(tomato)
head(tomato)
tail(tomato)
strawberry <- read_xlsx("Parameters.xlsx",
sheet = "Strawberry",
start_row = 2,
start_col = 7,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
dim(strawberry)
head(strawberry)
tail(strawberry)
squash <- read_xlsx("Parameters.xlsx",
sheet = "Squash",
start_row = 2,
start_col = 8,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE) %>%
rename(yield = Yield,
yldvar = `Yield Variation (%)`)
dim(squash)
head(squash)
tail(squash)
elec_price <- read_xlsx("Parameters.xlsx",
sheet = "Electricity Price") %>%
rename(epr_kwh = `Electricity Price ($/kWh)`)
dim(elec_price)
elec_price
pvsc <- wb_read(file = "Parameters.xlsx",
sheet = "PV system Cost (NREL)",
rows = c(1:109),
cols = c(1:5),
col_names = TRUE) %>%
rename(avtyps = `AV Types`,
item = Item,
cost = `Cost ($/W)`,
height = `Panel Height (ft.)`,
tcost = `Total Cost ($/W)`)
dim(pvsc)
head(pvsc)
tail(pvsc)
capex <- read.table(file = "CAPEX.txt",
header = TRUE,
sep = "\t") %>%
rename(capex = cost,
height = pheight,
array = tracker)
dim(capex)
capex
plottheme %>% ggplot(data = capex,
mapping = (aes(
x = height,
y = capex,
color = array,
group = array))) +
geom_point() +
geom_line() +
# geom_text(aes(label = "Tracker"),
#           nudge_x = 0.05,
#           nudge_y = 0.05,
#           size = 6) +
labs(
title = "CAPEX Cost by Solar Panel Height",
x = "Panel Height (ft.)",
y = "CAPEX Cost ($/W)",
color = "Array"
) +
scale_x_continuous(limits = c(4.5, 8.5)) +
scale_y_continuous(limits = c(1.5, 2.5)) +
guides(color = guide_legend(reverse = TRUE))
panconf <- wb_read(file = "Parameters.xlsx",
sheet = "Panel Spacing",
start_row = 2,
start_col = 1,
skip_empty_rows = TRUE,
skip_empty_cols = TRUE,
col_names = TRUE)
# rename(avtyps = `AV Types`,
#        item = Item,
#        cost = `Cost ($/W)`,
#        height = `Panel Height (ft.)`,
#        tcost = `Total Cost ($/W)`)
dim(panconf)
#head(panconf); tail(panconf)
energy_output <- read_xlsx("Parameters.xlsx",
sheet = "Energy Output Archived") %>%
rename(panels = TotalPanels,
datalot = DataLot,
al_regs = `Region of AL`,
zips = ZIPCODE,
array = `Array Type`,
dc_kw = `DC Size (kW)`,
energy = `Energy (kWh/Year)`) %>%
mutate(dc_kw = (round(dc_kw,2)),
array = case_when(
array == "1AxisRot" ~ "Tracking",
array == "FixedOpen" ~ "Fixed",
TRUE ~ array))
#filter(datalot == 2)
dim(energy_output)
head(energy_output)
tail(energy_output)
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
ggplot(data = energy_output,
mapping = aes(x = al_regs,
y = energy,
#fill = energy,
color = factor(panels),
group = factor(panels))) +
geom_line()+
geom_point() +
facet_grid(datalot~array) +
scale_x_discrete(limits = lox) +
guides(color = guide_legend(reverse = TRUE))
ggplot(data = energy_output,
mapping = aes(x = al_regs,
y = energy,
#fill = energy,
color = factor(dc_kw),
group = factor(dc_kw))) +
geom_line()+
geom_point() +
facet_grid(datalot~array) +
scale_x_discrete(limits = lox) +
guides(color = guide_legend(reverse = TRUE))
# Convert to data frames if they are not already
matrix1 <- energy_output # dimension of matrix is 176*7
matrix2 <- elec_price # dimension of matrix is 11*1
# Initialize the result data frame
#energy_revenue <- data.frame(matrix(nrow = 1936, ncol = 9))
energy_revenue <- data.frame(
matrix(nrow = nrow(matrix2)*nrow(matrix1),
ncol = 9))
# Variable to keep track of the row index in the result matrix
row_index <- 1
# Loop through each value of the second matrix
for (i in 1:nrow(matrix2)) {
# Loop through each value of the second matrix
for (j in 1:nrow(matrix1)) {
# First matrix, second matrix, combined two matrices.
new_row <- c(matrix1[j, ], matrix2[i, 1], matrix1[j, 7] * matrix2[i, 1])
# Assign the new row to the result matrix
energy_revenue[row_index, ] <- new_row
# Increment the row index
row_index <- row_index + 1
}
# Name the columns
colnames(energy_revenue) <- c(colnames(matrix1), "elcprc", "elcrev")
# Display the result
dim(energy_revenue)
head(energy_revenue); tail(energy_revenue)
# # Check for any NAs in the result
# if(any(is.na(energy_revenue))) {
#   na_indices <- which(is.na(energy_revenue), arr.ind = TRUE)
#   print(paste("NAs found at rows:", unique(na_indices[, 1])))
# } else {
#   print("No NAs found in the result data frame.")
# }
## | results='hide'
# Sample data
set.seed(123)
matrix1 <- energy_output # dimension of matrix is 176*7
matrix2 <- elec_price # dimension of matrix is 11*1
# Initializing the result matrix
result_matrix <- data.frame(matrix(ncol = 9, nrow = 0))
colnames(result_matrix) <- c(colnames(matrix1),  "elcrev", "elcprc")
# Loop to multiply first and second matrices
for (i in 1:nrow(matrix2)) {
temp_matrix <- matrix1
temp_matrix$E_Prc <- matrix2[i, 1]
temp_matrix$E_Rev <- matrix2[i, 1] * matrix1[, 7]
result_matrix <- rbind(result_matrix, temp_matrix)
}
# Display the resulting matrix
dim(result_matrix)
head(result_matrix)
tail(result_matrix)
lox <- c("Northern", "Central", "Black Belt", "Southern")
array_levs = c("Single Axis Rotation", "Fixed Open Rack")
datalot_levs = c("Location 1", "Location 2")
for (i in unique(energy_revenue$elcprc)) {
a = ggplot(data = (energy_revenue %>%
filter(elcprc == i)),
mapping = aes(x =al_regs,
y = elcrev,
#fill = energy,
color = factor(panels),
group = factor(panels)))+
geom_line()+
geom_point()+
facet_grid(datalot~array) +
scale_x_discrete(limits = lox) +
guides(color = guide_legend(reverse = TRUE))
cat("Electricity Price = ", i)
print(a)
}
