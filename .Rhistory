clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = colorRampPalette(c("green",
"yellow",
"red"))(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
number_format = "%.2f",
legend_breaks = uniquevalue,
legend_labels = c(uniquevalue)
)
uniquevalue = unique(as.vector(as.matrix(ct_sqavp_be_yld[-1])))
uniquevalue = unique(as.vector(as.matrix(ct_tavp_be_yld[-1])))
uniquevalue
colorcount = length(unique(as.vector(as.matrix(ct_tavp_be_yld[-1]))))
colorcount
heatmap_plot <- pheatmap((ct_tavp_be_yld),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = colorRampPalette(c("green",
"yellow",
"red"))(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
number_format = "%.2f",
legend_breaks = uniquevalue
)
sprop <- c(0, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50,
0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00)
array <- c("Fixed", "Tracking") # Solar Array
height <- c(4.6, 6.4, 8.2) # Panel height
al_regs <- c("Northern", "Central", "Black Belt", "Southern")
price <- c(3, 4, 5, 6, 7, 8, 9)
elcprc <- c(0.02, 0.03, 0.04) # Electricity Price
yldvar <- c(0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 1.00,
1.10, 1.20, 1.30, 1.40, 1.50, 1.60, 1.70, 1.80, 1.90, 2.00)
# Define the required columns
required_columns <- c("sprop", "array", "height",
"al_regs", "price", "elcprc")
# Check if the columns exist in sbav_profit
missing_columns <- setdiff(required_columns,
names(sbav_be_yld))
if (length(missing_columns) > 0) {
stop("Missing columns in sbav_be_yld: ",
paste(missing_columns, collapse = ", "))
}
# Generate column names using reversed order of expand.grid
col_names <- apply(expand.grid(height, array, sprop), 1,
function(x) paste0(x[3], x[2], x[1]))
# Generate row names using reversed order of expand.grid
row_names <- apply(expand.grid(elcprc,
price,
al_regs), 1,
function(x) paste0(x, collapse = ""))
# Create an empty matrix to store the results
result_matrix <- matrix(NA, nrow = length(row_names),
ncol = length(col_names))
colnames(result_matrix) <- col_names
rownames(result_matrix) <- row_names
# Create a data frame with
# all combinations of parameters in reversed order
param_combinations <- expand.grid(elcprc = elcprc,
price = price,
al_regs = al_regs,
height = height,
array = array,
sprop = sprop)
# Merge with tavp_be_yld to get tavp_be_yld values for each combination
merged_data <- merge(param_combinations,
sbav_be_yld,
by = required_columns,
all.x = TRUE)
# Reshape merged_data to fill result_matrix with
# reversed column and row names
merged_data$col_name <- apply(
merged_data[, c("sprop", "array", "height")], 1,
function(x) paste0(x[1], x[2], x[3]))
merged_data$row_name <- apply(
merged_data[, c("al_regs", "price", "elcprc")], 1,
function(x) paste0(x[3],
x[2],
x[1]))
# Fill the matrix with sbav_profit values
for (i in seq_len(nrow(result_matrix))) {
row_condition <- rownames(result_matrix)[i]
row_data <- merged_data[
merged_data$row_name == row_condition, ]
if (nrow(row_data) > 0) {
result_matrix[i,
match(row_data$col_name,
colnames(result_matrix))] <- round(
row_data$yield, 2)
}
ct_sbav_be_yld <- as.data.frame(result_matrix) # Table in Excel.
write.csv(as.data.frame(ct_sbav_be_yld),
row.names = TRUE,
file = "Results/ct_sbav_be_yld.csv")
dim(ct_sbav_be_yld)
uniquevalue <- unique(as.vector(as.matrix(ct_sbav_be_yld[-1])))
uniquevalue
colorcount <- length(unique(as.vector(as.matrix(ct_sbav_be_yld[-1]))))
colorcount
heatmap_plot <- pheatmap((ct_sbav_be_yld),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = colorRampPalette(c("green",
"yellow",
"red"))(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
number_format = "%.2f",
legend_breaks = uniquevalue,
legend_labels = c(uniquevalue)
)
ggsave(heatmap_plot,
height = 8,
width = 12,
units = "in",
file = paste0("Plots/gp_sbav_be_yld", ".png"))
rm(heatmap_plot); rm(colorcount); rm(uniquevalue)
# Define the values for each variable
sprop <- c(0, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50,
0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00)
array <- c("Fixed", "Tracking") # Solar Array
height <- c(4.6, 6.4, 8.2) # Panel height
al_regs <- c("Northern", "Central", "Black Belt", "Southern")
price <- c(11, 12, 13, 14, 15, 16, 17)
elcprc <- c(0.02, 0.03, 0.04) # Electricity Price
yldvar <- c(0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 1.00,
1.10, 1.20, 1.30, 1.40, 1.50, 1.60, 1.70, 1.80, 1.90, 2.00)
# Define the required columns
required_columns <- c("sprop", "array", "height",
"al_regs", "price", "elcprc")
# Check if the columns exist in tav_profit
missing_columns <- setdiff(required_columns,
names(sqav_be_yld))
if (length(missing_columns) > 0) {
stop("Missing columns in sqavp_be_yld: ",
paste(missing_columns, collapse = ", "))
}
# Generate column names using reversed order of expand.grid
col_names <- apply(expand.grid(height, array, sprop), 1,
function(x) paste0(x[3], x[2], x[1]))
# Generate row names using reversed order of expand.grid
row_names <- apply(expand.grid(elcprc,
price,
al_regs), 1,
function(x) paste0(x, collapse = ""))
# Create an empty matrix to store the results
result_matrix <- matrix(NA, nrow = length(row_names),
ncol = length(col_names))
colnames(result_matrix) <- col_names
rownames(result_matrix) <- row_names
# Create a data frame with
# all combinations of parameters in reversed order
param_combinations <- expand.grid(elcprc = elcprc,
price = price,
al_regs = al_regs,
height = height,
array = array,
sprop = sprop)
# Merge with tavp_be_yld to get sbav_be_yld values for each combination
merged_data <- merge(param_combinations,
sqav_be_yld,
by = required_columns,
all.x = TRUE)
# Reshape merged_data to fill result_matrix with
# reversed column and row names
merged_data$col_name <- apply(
merged_data[, c("sprop", "array", "height")], 1,
function(x) paste0(x[1], x[2], x[3]))
merged_data$row_name <- apply(
merged_data[, c("al_regs", "price", "elcprc")], 1,
function(x) paste0(x[3],
x[2],
x[1]))
# Fill the matrix with sbav_profit values
for (i in seq_len(nrow(result_matrix))) {
row_condition <- rownames(result_matrix)[i]
row_data <- merged_data[
merged_data$row_name == row_condition, ]
if (nrow(row_data) > 0) {
result_matrix[i,
match(row_data$col_name,
colnames(result_matrix))] <- round(
row_data$yield, 2)
}
ct_sqav_be_yld <- as.data.frame(result_matrix) # Table in Excel.
write.csv(as.data.frame(ct_sqav_be_yld),
row.names = TRUE,
file = "Results/ct_sqav_be_yld.csv")
dim(ct_sqav_be_yld)
rm(result_matrix)
uniquevalue = unique(as.vector(as.matrix(ct_sqavp_be_yld[-1])))
uniquevalue = unique(as.vector(as.matrix(ct_sqav_be_yld[-1])))
uniquevalue
colorcount = length(unique(as.vector(as.matrix(ct_sqav_be_yld[-1]))))
colorcount
heatmap_plot <- pheatmap((ct_sqav_be_yld),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = colorRampPalette(c("green",
"yellow",
"red"))(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
number_format = "%.2f",
legend_breaks = uniquevalue
)
ggsave(heatmap_plot,
height = 8,
width = 12,
units = "in",
file = paste0("Plots/gp_sqav_be_yld", ".png"))
rm(heatmap_plot); rm(colorcount); rm(uniquevalue)
uniquevalue = unique(as.vector(as.matrix(ct_sqav_be_yld[-1])))
uniquevalue
colorcount = length(unique(as.vector(as.matrix(ct_sqav_be_yld[-1]))))
colorcount
heatmap_plot <- pheatmap((ct_sqav_be_yld),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = colorRampPalette(c("green",
"yellow",
"red"), -1)(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
number_format = "%.2f",
legend_breaks = uniquevalue
)
uniquevalue = unique(as.vector(as.matrix(ct_sqav_be_yld[-1])))
uniquevalue
colorcount = length(unique(as.vector(as.matrix(ct_sqav_be_yld[-1]))))
colorcount
heatmap_plot <- pheatmap((ct_sqav_be_yld),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = colorRampPalette(c("green",
"yellow",
"red"))(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
annotation_colors = uniquevalue,
number_format = "%.2f",
legend_breaks = uniquevalue
)
uniquevalue = unique(as.vector(as.matrix(ct_sqav_be_yld[-1])))
uniquevalue
colorcount = length(unique(as.vector(as.matrix(ct_sqav_be_yld[-1]))))
colorcount
heatmap_plot <- pheatmap((ct_sqav_be_yld),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = colorRampPalette(c("green",
"yellow",
"red"))(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
annotation_colors = uniquevalue,
number_format = "%.2f"
#legend_breaks = uniquevalue
)
uniquevalue = unique(as.vector(as.matrix(ct_sqav_be_yld[-1])))
uniquevalue
colorcount = length(unique(as.vector(as.matrix(ct_sqav_be_yld[-1]))))
colorcount
heatmap_plot <- pheatmap((ct_sqav_be_yld),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = colorRampPalette(c("green",
"yellow",
"red"))(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
annotation_colors = uniquevalue,
number_format = "%.2f"
legend_breaks = uniquevalue
uniquevalue = unique(as.vector(as.matrix(ct_sqav_be_yld[-1])))
uniquevalue
colorcount = length(unique(as.vector(as.matrix(ct_sqav_be_yld[-1]))))
colorcount
heatmap_plot <- pheatmap((ct_sqav_be_yld),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = colorRampPalette(c("green",
"yellow",
"red"))(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
annotation_colors = uniquevalue,
number_format = "%.2f",
legend_breaks = uniquevalue
)
uniquevalue = unique(as.vector(as.matrix(ct_sqav_be_yld[-1])))
uniquevalue
colorcount = length(unique(as.vector(as.matrix(ct_sqav_be_yld[-1]))))
colorcount
heatmap_plot <- pheatmap((ct_sqav_be_yld),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = colorRampPalette(c("green",
"yellow",
"red"))(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
number_format = "%.2f",
annotation_colors = c(uniquevalue),
#legend_breaks = uniquevalue
)
uniquevalue = unique(as.vector(as.matrix(ct_sqav_be_yld[-1])))
uniquevalue
colorcount = length(unique(as.vector(as.matrix(ct_sqav_be_yld[-1]))))
colorcount
heatmap_plot <- pheatmap((ct_sqav_be_yld),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = colorRampPalette(c("green",
"yellow",
"red"))(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
number_format = "%.2f",
annotation_colors = c(uniquevalue),
legend_breaks = uniquevalue
)
uniquevalue = unique(as.vector(as.matrix(ct_sqav_be_yld[-1])))
uniquevalue
colorcount = length(unique(as.vector(as.matrix(ct_sqav_be_yld[-1]))))
colorcount
heatmap_plot <- pheatmap((ct_sqav_be_yld),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = colorRampPalette(c("green",
"yellow",
"red"))(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
number_format = "%.2f",
annotation_colors = c(uniquevalue),
legend_labels = uniquevalue
)
uniquevalue = unique(as.vector(as.matrix(ct_sqav_be_yld[-1])))
uniquevalue
colorcount = length(unique(as.vector(as.matrix(ct_sqav_be_yld[-1]))))
colorcount
heatmap_plot <- pheatmap((ct_sqav_be_yld),
#clustering_distance_rows = "correlation",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
angle_col = 90,
na_col = "white",
color = colorRampPalette(c("green",
"yellow",
"red"))(colorcount),
cellheight = 5,
cellwidth = 5,
fontsize = 12,
fontsize_row = 4,
fontsize_col = 4,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = FALSE,
number_format = "%.2f",
annotation_colors = c(uniquevalue),
legend_breaks = uniquevalue,
legend_labels = c(uniquevalue)
)
